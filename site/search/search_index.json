{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"changelog/","text":"Pagina en Construcci\u00f3n Changelog \u00b6 Slarrauri Web Site \u00b6 8.2.5 _ March 6, 2022 \u00b6 Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#slarrauri-web-site","text":"","title":"Slarrauri Web Site"},{"location":"changelog/#8.2.5","text":"Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"8.2.5 _ March 6, 2022"},{"location":"cv_castellano/","text":"Curriculum Sebastian Larrauri \u00b6 \ud83c\udf73 RESUMEN HABILIDADES \u00b6 Summary \ud83d\udd2d Actualmente estoy trabajando desarrollando Flutter/Dart Apps \ud83c\udf31 Estoy Aprendiendo Blockchain, Solidity, DApps and Web3.0 \ud83e\udd14 Busco Colaboradores para la Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry Habilidades T\u00e9cnicas \u00b6 Estas son algunas de las tecnolog\u00edas que mas he usado a lo largo de mi carrera que comenz\u00f3 all\u00e1 por el a\u00f1o 2003: Flutter, +4 a\u00f1os Dart, +4 a\u00f1os Solidity +1 a\u00f1o HTML, CSS, Javascript, +8 a\u00f1os Bootstrap +8 a\u00f1os PHP, +8 a\u00f1os Jquery, +8 a\u00f1os SQL, Mysql, +8 a\u00f1os MongoDB, ElasticSearch, +5 a\u00f1os GIT, +6 a\u00f1os Scrum, +8 a\u00f1os PMBOK, +8 a\u00f1os Wordpress, +6 a\u00f1os Joomla. +6 a\u00f1os CI/CD, +2 a\u00f1os Habilidades Blandas \u00b6 Soy una persona que se adapta r\u00e1pidamente, que aprende r\u00e1pido, autodidacta y capaz de auto gestionarse eficientemente. Me encanta aprender y experimentar con cosas nuevas. Idiomas \u00b6 \ud83c\udde6\ud83c\uddf7 Espa\u00f1ol/Castellano: Nativo \ud83c\uddfa\ud83c\uddf8 English: Intermediate B1 Level \ud83d\udc68\u200d\ud83d\udcbb EXPERIENCIA \u00b6 _CODERIO \u00b6 Febrero 2021 \u2013 Actualidad _coderio es una Software Factory & Staff Augmentation Puesto: Flutter Tech Lead & Senior Flutter Developer Entre mis responsabilidades se encuentran: La creaci\u00f3n de c\u00f3digo escalable y mantenible para diversas aplicaciones realizadas en Flutter & Dart: App de Gruas App Realidad aumentada con IA App de pedidos App de turnos (Flutter Web) Entre Otras La gesti\u00f3n de equipos Interdisciplinarios. Aplicar y verificar el uso de buenas pr\u00e1cticas. La realizaci\u00f3n de Code Review del c\u00f3digo desarrollado por los colaboradores. La integraci\u00f3n y puesta en marcha de los proyectos realizados. La realizaci\u00f3n de propuestas t\u00e9cnicas para los proyectos a realizar. La realizaci\u00f3n de las gu\u00edas y manuales del equipo Flutter. La colaboraci\u00f3n con otras \u00e1reas del equipo. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co Landhi S.A. \u00b6 Enero 2022 \u2013 Actualidad Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Puesto: Flutter Tech Lead / Senior Flutter Developer Entre mis responsabilidades se encuentran: Entre mis responsabilidades y tareas se encuentran: El desarrollo de la documentaci\u00f3n t\u00e9cnica del desarrollo. La realizaci\u00f3n de la aplicaci\u00f3n mobile (Android/Iphone) de la empresa con Flutter. La gesti\u00f3n del equipo de desarrollo Flutter El Deploy de la apps Flutter en las tiendas (Android/Apple) La colaboraci\u00f3n con otras areas de la empresa aportando mis conocimientos y experiencia. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar PRESSA S.A. \u00b6 Junio 2017 \u2013 Agosto 2020 Pressa es Log\u00edstica Satelital y Seguimiento de veh\u00edculos. Puesto: Semi Senior Fullstack developer Entre mis responsabilidades se encuentran: Full Stack Developer / Project Manager Desarrollo y Gesti\u00f3n de las aplicaciones Android/Iphone de la empresa. Desarrollo de micro servicios en PHP para clientes. Mantenimiento y creaci\u00f3n de nuevos servicios para el sistema web de seguimiento de veh\u00edculos. Comunicaci\u00f3n con clientes recaudando informaci\u00f3n sobre sus necesidades para la creaci\u00f3n de nuevos productos dentro de la compa\u00f1\u00eda. Tecnolog\u00edas M\u00e1s usadas Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar Slarrauri \u00b6 Septiembre 2010 - Junio 2017 (CBA) Slarrauri es mi carrera como Profesional Freelance, emprendedor, Open Source Puesto: Emprendedor y Programador Entre los proyectos que he realizado destaco: Fundador, Desarrollador, dise\u00f1ador y Escritor del Sito Web FacebookEmpresas.com, el mismo brindaba informaci\u00f3n sobre como las empresas podr\u00edan explotar Facebook para su beneficio. (2009) Project Manager y Desarrollador de Betonimous.com, Aplicaci\u00f3n M\u00f3vil que mediante IA intentaba pronosticar resultados deportivos. (2016) Creaci\u00f3n y puesta en Marcha de sistema de VideoChat para particulares Cameruser.com (2007). Desarrollador de sitios web de variadas tem\u00e1ticas utilizando Wordpress. Tecnolog\u00edas M\u00e1s usadas Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. github.com/slarrauri IGS \u2013 Sistemas \u00b6 Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas es Desarrollo de sistemas y Realidad Aumentada. Puesto: Project Manager Entre mis responsabilidades se encuentran: Definici\u00f3n de necesidades y propuesta de soluciones de cada proyecto. Coordinaci\u00f3n de tareas de los departamentos de dise\u00f1o, programaci\u00f3n y contenidos. Seguimiento de la estrategia, funcionalidades y objetivos del proyecto Comunicaci\u00f3n con clientes Definici\u00f3n de presupuesto. Tecnolog\u00edas M\u00e1s usadas PMBOK, SCRUM. igs.com.ar Gromac \u00b6 Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac es Sistemas Inform\u00e1ticos Puesto: Semi Senior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de sitios y blogs para el mercado europeo. Realizaci\u00f3n y puesta en marcha de campa\u00f1as de e-marketing para los mismos. Tecnolog\u00edas M\u00e1s usadas PHP, HTML, CSS, Wordpress, Joomla. Grupo 2 Lomas \u00b6 Febrero 2005 \u2013 Diciembre 2006 Grupos 2 Lomas es un Sistema de pago online Puesto: junior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de Medio de Cobro Online. (DataCard, DataPago) Desarrollo y puesta en marcha del plan de marketing online y posicionamiento web. Tecnolog\u00edas M\u00e1s usadas Wordpress, Joomla, PHP, HTML, CSS. \ud83d\udcdd EDUCACI\u00d3N \u00b6 Licenciatura en Filosof\u00eda \u00b6 - Universidad Nacional C\u00f3rdoba. - Incompleto: 2 A\u00f1os de Cursados 2016. Tecnicatura superior en programaci\u00f3n \u00b6 - Universidad Tecnol\u00f3gica Nacional - Incompleto Junio 2003 Instituto Secundario Dr. Manuel Lucero \u00b6 - Titulo: Bachiller T\u00e9cnico Qu\u00edmico. - Finalizado Diciembre 1998 \u2615\ufe0f CURSOS Y CAPACITACIONES \u00b6 Info Nunca parar de aprender es algo que me apasiona por lo que sigo realizando cursos y capacitaciones constantemente, entre ellos: Curso de Introducci\u00f3n a Solidity December 2021 \u00b6 https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/ The Complete Flutter Development Bootcamp with Dart Diciembre 2019 \u00b6 Negociaci\u00f3n y resoluci\u00f3n de conflictos Enero 2014 - Diciembre 2014 \u00b6 Macquarie Graduate School of Management \u2013 Open2Study No est\u00e1 m\u00e1s disponible. \u00b6 La experiencia del usuario en la Web UX/UI Enero 2014 - Diciembre 2014 \u00b6 Open2Study no est\u00e1 m\u00e1s disponible. Principios de la Gesti\u00f3n de Proyectos Enero 2014 - Diciembre 2014 \u00b6 Polytechnic West \u2013 Open2Study Ya no est\u00e1 m\u00e1s disponible. Pensamiento Cient\u00edfico Enero 2014 - Diciembre 2014 \u00b6 Universidad Nacional Aut\u00f3noma de M\u00e9xico \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf Gamification Course Enero 2014 - Diciembre 2014 \u00b6 University of Pennsylvania \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf Programaci\u00f3n Neuroling\u00fc\u00edstica Septiembre 2011 - Junio 2012 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial) #### Din\u00e1micas Sociales Septiembre 2011 - Junio 2012 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial Cl\u00ednica de Ventas Enero 2010 - Diciembre 2011 \u00b6 Cre\u00ed que Sab\u00edas Liderazgo Enero 2010 - Diciembre 2011 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial Seminario Calidad Norma (ISO 9001) Enero 2010 - Diciembre 2011 \u00b6 Neo-Consultores Ingles Intensivo Nivel 2 Septiembre 2009 - Junio 2010 \u00b6 Step Ahead PNL Personal Enero 2005 - Diciembre 2006 \u00b6 Magdalena Hessel Alonso T\u00e9cnico Dise\u00f1o Gr\u00e1fico Enero 2001 - Diciembre 2002 \u00b6 AES Computaci\u00f3n T\u00e9cnico Dise\u00f1o Web Enero 2001 - Diciembre 2002 \u00b6 AES Computaci\u00f3n T\u00e9cnico Marketing y Comercializaci\u00f3n Enero 1998 - Diciembre 1999 \u00b6 Mercadotecnia Consultores T\u00e9cnico Publicidad e Imagen Corporativa Enero 1998 \u2013 Diciembre \u00b6 Mercadotecnia Consultores","title":"Castellano"},{"location":"cv_castellano/#curriculum-sebastian-larrauri","text":"","title":"Curriculum Sebastian Larrauri"},{"location":"cv_castellano/#resumen-habilidades","text":"Summary \ud83d\udd2d Actualmente estoy trabajando desarrollando Flutter/Dart Apps \ud83c\udf31 Estoy Aprendiendo Blockchain, Solidity, DApps and Web3.0 \ud83e\udd14 Busco Colaboradores para la Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry","title":"\ud83c\udf73 RESUMEN HABILIDADES"},{"location":"cv_castellano/#habilidades-tecnicas","text":"Estas son algunas de las tecnolog\u00edas que mas he usado a lo largo de mi carrera que comenz\u00f3 all\u00e1 por el a\u00f1o 2003: Flutter, +4 a\u00f1os Dart, +4 a\u00f1os Solidity +1 a\u00f1o HTML, CSS, Javascript, +8 a\u00f1os Bootstrap +8 a\u00f1os PHP, +8 a\u00f1os Jquery, +8 a\u00f1os SQL, Mysql, +8 a\u00f1os MongoDB, ElasticSearch, +5 a\u00f1os GIT, +6 a\u00f1os Scrum, +8 a\u00f1os PMBOK, +8 a\u00f1os Wordpress, +6 a\u00f1os Joomla. +6 a\u00f1os CI/CD, +2 a\u00f1os","title":"Habilidades T\u00e9cnicas"},{"location":"cv_castellano/#habilidades-blandas","text":"Soy una persona que se adapta r\u00e1pidamente, que aprende r\u00e1pido, autodidacta y capaz de auto gestionarse eficientemente. Me encanta aprender y experimentar con cosas nuevas.","title":"Habilidades Blandas"},{"location":"cv_castellano/#idiomas","text":"\ud83c\udde6\ud83c\uddf7 Espa\u00f1ol/Castellano: Nativo \ud83c\uddfa\ud83c\uddf8 English: Intermediate B1 Level","title":"Idiomas"},{"location":"cv_castellano/#experiencia","text":"","title":"\ud83d\udc68\u200d\ud83d\udcbb EXPERIENCIA "},{"location":"cv_castellano/#_coderio","text":"Febrero 2021 \u2013 Actualidad _coderio es una Software Factory & Staff Augmentation Puesto: Flutter Tech Lead & Senior Flutter Developer Entre mis responsabilidades se encuentran: La creaci\u00f3n de c\u00f3digo escalable y mantenible para diversas aplicaciones realizadas en Flutter & Dart: App de Gruas App Realidad aumentada con IA App de pedidos App de turnos (Flutter Web) Entre Otras La gesti\u00f3n de equipos Interdisciplinarios. Aplicar y verificar el uso de buenas pr\u00e1cticas. La realizaci\u00f3n de Code Review del c\u00f3digo desarrollado por los colaboradores. La integraci\u00f3n y puesta en marcha de los proyectos realizados. La realizaci\u00f3n de propuestas t\u00e9cnicas para los proyectos a realizar. La realizaci\u00f3n de las gu\u00edas y manuales del equipo Flutter. La colaboraci\u00f3n con otras \u00e1reas del equipo. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co","title":"_CODERIO"},{"location":"cv_castellano/#landhi-sa","text":"Enero 2022 \u2013 Actualidad Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Puesto: Flutter Tech Lead / Senior Flutter Developer Entre mis responsabilidades se encuentran: Entre mis responsabilidades y tareas se encuentran: El desarrollo de la documentaci\u00f3n t\u00e9cnica del desarrollo. La realizaci\u00f3n de la aplicaci\u00f3n mobile (Android/Iphone) de la empresa con Flutter. La gesti\u00f3n del equipo de desarrollo Flutter El Deploy de la apps Flutter en las tiendas (Android/Apple) La colaboraci\u00f3n con otras areas de la empresa aportando mis conocimientos y experiencia. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar","title":"Landhi S.A."},{"location":"cv_castellano/#pressa-sa","text":"Junio 2017 \u2013 Agosto 2020 Pressa es Log\u00edstica Satelital y Seguimiento de veh\u00edculos. Puesto: Semi Senior Fullstack developer Entre mis responsabilidades se encuentran: Full Stack Developer / Project Manager Desarrollo y Gesti\u00f3n de las aplicaciones Android/Iphone de la empresa. Desarrollo de micro servicios en PHP para clientes. Mantenimiento y creaci\u00f3n de nuevos servicios para el sistema web de seguimiento de veh\u00edculos. Comunicaci\u00f3n con clientes recaudando informaci\u00f3n sobre sus necesidades para la creaci\u00f3n de nuevos productos dentro de la compa\u00f1\u00eda. Tecnolog\u00edas M\u00e1s usadas Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar","title":"PRESSA S.A."},{"location":"cv_castellano/#slarrauri","text":"Septiembre 2010 - Junio 2017 (CBA) Slarrauri es mi carrera como Profesional Freelance, emprendedor, Open Source Puesto: Emprendedor y Programador Entre los proyectos que he realizado destaco: Fundador, Desarrollador, dise\u00f1ador y Escritor del Sito Web FacebookEmpresas.com, el mismo brindaba informaci\u00f3n sobre como las empresas podr\u00edan explotar Facebook para su beneficio. (2009) Project Manager y Desarrollador de Betonimous.com, Aplicaci\u00f3n M\u00f3vil que mediante IA intentaba pronosticar resultados deportivos. (2016) Creaci\u00f3n y puesta en Marcha de sistema de VideoChat para particulares Cameruser.com (2007). Desarrollador de sitios web de variadas tem\u00e1ticas utilizando Wordpress. Tecnolog\u00edas M\u00e1s usadas Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. github.com/slarrauri","title":"Slarrauri"},{"location":"cv_castellano/#igs-sistemas","text":"Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas es Desarrollo de sistemas y Realidad Aumentada. Puesto: Project Manager Entre mis responsabilidades se encuentran: Definici\u00f3n de necesidades y propuesta de soluciones de cada proyecto. Coordinaci\u00f3n de tareas de los departamentos de dise\u00f1o, programaci\u00f3n y contenidos. Seguimiento de la estrategia, funcionalidades y objetivos del proyecto Comunicaci\u00f3n con clientes Definici\u00f3n de presupuesto. Tecnolog\u00edas M\u00e1s usadas PMBOK, SCRUM. igs.com.ar","title":"IGS \u2013 Sistemas"},{"location":"cv_castellano/#gromac","text":"Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac es Sistemas Inform\u00e1ticos Puesto: Semi Senior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de sitios y blogs para el mercado europeo. Realizaci\u00f3n y puesta en marcha de campa\u00f1as de e-marketing para los mismos. Tecnolog\u00edas M\u00e1s usadas PHP, HTML, CSS, Wordpress, Joomla.","title":"Gromac"},{"location":"cv_castellano/#grupo-2-lomas","text":"Febrero 2005 \u2013 Diciembre 2006 Grupos 2 Lomas es un Sistema de pago online Puesto: junior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de Medio de Cobro Online. (DataCard, DataPago) Desarrollo y puesta en marcha del plan de marketing online y posicionamiento web. Tecnolog\u00edas M\u00e1s usadas Wordpress, Joomla, PHP, HTML, CSS.","title":"Grupo 2 Lomas"},{"location":"cv_castellano/#educacion","text":"","title":"\ud83d\udcdd EDUCACI\u00d3N "},{"location":"cv_castellano/#licenciatura-en-filosofia","text":"- Universidad Nacional C\u00f3rdoba. - Incompleto: 2 A\u00f1os de Cursados 2016.","title":"Licenciatura en Filosof\u00eda"},{"location":"cv_castellano/#tecnicatura-superior-en-programacion","text":"- Universidad Tecnol\u00f3gica Nacional - Incompleto Junio 2003","title":"Tecnicatura superior en programaci\u00f3n"},{"location":"cv_castellano/#instituto-secundario-dr-manuel-lucero","text":"- Titulo: Bachiller T\u00e9cnico Qu\u00edmico. - Finalizado Diciembre 1998","title":"Instituto Secundario Dr. Manuel Lucero"},{"location":"cv_castellano/#cursos-y-capacitaciones","text":"Info Nunca parar de aprender es algo que me apasiona por lo que sigo realizando cursos y capacitaciones constantemente, entre ellos:","title":"\u2615\ufe0f CURSOS Y CAPACITACIONES"},{"location":"cv_castellano/#curso-de-introduccion-a-solidity-december-2021","text":"https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/","title":"Curso de Introducci\u00f3n a Solidity December 2021"},{"location":"cv_castellano/#the-complete-flutter-development-bootcamp-with-dart-diciembre-2019","text":"","title":"The Complete Flutter Development Bootcamp with Dart Diciembre 2019"},{"location":"cv_castellano/#negociacion-y-resolucion-de-conflictos-enero-2014-diciembre-2014","text":"","title":"Negociaci\u00f3n y resoluci\u00f3n de conflictos Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#macquarie-graduate-school-of-management-open2study-no-esta-mas-disponible","text":"","title":"Macquarie Graduate School of Management \u2013 Open2Study No est\u00e1 m\u00e1s disponible."},{"location":"cv_castellano/#la-experiencia-del-usuario-en-la-web-uxui-enero-2014-diciembre-2014","text":"Open2Study no est\u00e1 m\u00e1s disponible.","title":"La experiencia del usuario en la Web UX/UI Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#principios-de-la-gestion-de-proyectos-enero-2014-diciembre-2014","text":"Polytechnic West \u2013 Open2Study Ya no est\u00e1 m\u00e1s disponible.","title":"Principios de la Gesti\u00f3n de Proyectos Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#pensamiento-cientifico-enero-2014-diciembre-2014","text":"Universidad Nacional Aut\u00f3noma de M\u00e9xico \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf","title":"Pensamiento Cient\u00edfico Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#gamification-course-enero-2014-diciembre-2014","text":"University of Pennsylvania \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf","title":"Gamification Course Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#programacion-neurolinguistica-septiembre-2011-junio-2012","text":"Grupo Ases Capacitaci\u00f3n Empresarial)","title":"Programaci\u00f3n Neuroling\u00fc\u00edstica Septiembre 2011 - Junio 2012"},{"location":"cv_castellano/#dinamicas-sociales-septiembre-2011-junio-2012","text":"Grupo Ases Capacitaci\u00f3n Empresarial","title":"#### Din\u00e1micas Sociales Septiembre 2011 - Junio 2012"},{"location":"cv_castellano/#clinica-de-ventas-enero-2010-diciembre-2011","text":"Cre\u00ed que Sab\u00edas","title":"Cl\u00ednica de Ventas Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#liderazgo-enero-2010-diciembre-2011","text":"Grupo Ases Capacitaci\u00f3n Empresarial","title":"Liderazgo Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#seminario-calidad-norma-iso-9001-enero-2010-diciembre-2011","text":"Neo-Consultores","title":"Seminario Calidad Norma (ISO 9001) Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#ingles-intensivo-nivel-2-septiembre-2009-junio-2010","text":"Step Ahead","title":"Ingles Intensivo Nivel 2 Septiembre 2009 - Junio 2010"},{"location":"cv_castellano/#pnl-personal-enero-2005-diciembre-2006","text":"Magdalena Hessel Alonso","title":"PNL Personal Enero 2005 - Diciembre 2006"},{"location":"cv_castellano/#tecnico-diseno-grafico-enero-2001-diciembre-2002","text":"AES Computaci\u00f3n","title":"T\u00e9cnico Dise\u00f1o Gr\u00e1fico Enero 2001 - Diciembre 2002"},{"location":"cv_castellano/#tecnico-diseno-web-enero-2001-diciembre-2002","text":"AES Computaci\u00f3n","title":"T\u00e9cnico Dise\u00f1o Web Enero 2001 - Diciembre 2002"},{"location":"cv_castellano/#tecnico-marketing-y-comercializacion-enero-1998-diciembre-1999","text":"Mercadotecnia Consultores","title":"T\u00e9cnico Marketing y Comercializaci\u00f3n Enero 1998 - Diciembre 1999"},{"location":"cv_castellano/#tecnico-publicidad-e-imagen-corporativa-enero-1998-diciembre","text":"Mercadotecnia Consultores","title":"T\u00e9cnico Publicidad e Imagen Corporativa Enero 1998 \u2013 Diciembre"},{"location":"proyectos/","text":"Pagina en Construcci\u00f3n En esta seccion encontraras los proyectos open source que he desarrollado. Dart & Flutter: The Professional Path to learn it! The Flutter Developer Guide","title":"Proyectos"},{"location":"blog/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Blog \u00b6 The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading","title":"The past, present and future"},{"location":"blog/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading","title":"Excluding content from search"},{"location":"blog/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Search: better, faster, smaller"},{"location":"blog/2021/excluding-content-from-search/","text":"Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that . Prior art \u00b6 MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation. What's new? \u00b6 The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it. Excluding pages \u00b6 An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] } Conclusion \u00b6 The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that .","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#prior-art","text":"MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation.","title":"Prior art"},{"location":"blog/2021/excluding-content-from-search/#whats-new","text":"The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.","title":"What's new?"},{"location":"blog/2021/excluding-content-from-search/#excluding-pages","text":"An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ...","title":"Excluding pages"},{"location":"blog/2021/excluding-content-from-search/#excluding-sections","text":"If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"blog/2021/excluding-content-from-search/#excluding-blocks","text":"If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] }","title":"Excluding blocks"},{"location":"blog/2021/excluding-content-from-search/#conclusion","text":"The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Conclusion"},{"location":"blog/2021/search-better-faster-smaller/","text":"Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that . Architecture \u00b6 Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER Search index \u00b6 The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews. Search worker \u00b6 The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index. Search previews \u00b6 Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block. What's new? \u00b6 After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects. Rich search previews \u00b6 As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization . Tokenizer lookahead \u00b6 The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4 Case changes \u00b6 Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5 Version numbers \u00b6 Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes. HTML/XML tags \u00b6 If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section. Accurate highlighting \u00b6 Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter . Benchmarks \u00b6 We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once. User interface \u00b6 Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly. What's next? \u00b6 Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that .","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#architecture","text":"Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER","title":"Architecture"},{"location":"blog/2021/search-better-faster-smaller/#search-index","text":"The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.","title":"Search index"},{"location":"blog/2021/search-better-faster-smaller/#search-worker","text":"The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index.","title":"Search worker"},{"location":"blog/2021/search-better-faster-smaller/#search-previews","text":"Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block.","title":"Search previews"},{"location":"blog/2021/search-better-faster-smaller/#whats-new","text":"After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects.","title":"What's new?"},{"location":"blog/2021/search-better-faster-smaller/#rich-search-previews","text":"As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization .","title":"Rich search previews"},{"location":"blog/2021/search-better-faster-smaller/#tokenizer-lookahead","text":"The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4","title":"Tokenizer lookahead"},{"location":"blog/2021/search-better-faster-smaller/#case-changes","text":"Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5","title":"Case changes"},{"location":"blog/2021/search-better-faster-smaller/#version-numbers","text":"Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes.","title":"Version numbers"},{"location":"blog/2021/search-better-faster-smaller/#htmlxml-tags","text":"If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.","title":"HTML/XML tags"},{"location":"blog/2021/search-better-faster-smaller/#accurate-highlighting","text":"Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter .","title":"Accurate highlighting"},{"location":"blog/2021/search-better-faster-smaller/#benchmarks","text":"We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.","title":"Benchmarks"},{"location":"blog/2021/search-better-faster-smaller/#user-interface","text":"Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.","title":"User interface"},{"location":"blog/2021/search-better-faster-smaller/#whats-next","text":"Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"What's next?"},{"location":"blog/2021/the-past-present-and-future/","text":"The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project. A little history \u00b6 In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021. 2021 in numbers \u00b6 2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world. Features \u00b6 It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times. Funding \u00b6 In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide. 2022 \u00b6 Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#a-little-history","text":"In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021.","title":"A little history"},{"location":"blog/2021/the-past-present-and-future/#2021-in-numbers","text":"2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world.","title":"2021 in numbers"},{"location":"blog/2021/the-past-present-and-future/#features","text":"It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times.","title":"Features"},{"location":"blog/2021/the-past-present-and-future/#funding","text":"In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide.","title":"Funding"},{"location":"blog/2021/the-past-present-and-future/#2022","text":"Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"2022"}]}