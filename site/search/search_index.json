{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"changelog/","text":"Pagina en Construcci\u00f3n Changelog \u00b6 Slarrauri Web Site \u00b6 8.2.5 _ March 6, 2022 \u00b6 Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#slarrauri-web-site","text":"","title":"Slarrauri Web Site"},{"location":"changelog/#8.2.5","text":"Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"8.2.5 _ March 6, 2022"},{"location":"cv_castellano/","text":"Curriculum Sebastian Larrauri \u00b6 Descargar como PDF \ud83c\udf73 RESUMEN HABILIDADES \u00b6 Summary \ud83d\udd2d Actualmente estoy trabajando desarrollando Flutter/Dart Apps \ud83c\udf31 Estoy Aprendiendo Blockchain, Solidity, DApps and Web3.0 \ud83e\udd14 Busco Colaboradores para la Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry Informaci\u00f3n de Contacto \ud83d\udcf1 +543516200864 \u2709\ufe0f slarrauri@gmail.com \ud83c\udf0e http://slarrauri.ar \ud83d\udc69\u200d\ud83d\udcbb https://github.com/slarrauri \ud83d\udc23 https://twitter.com/slarrauri Habilidades T\u00e9cnicas \u00b6 Estas son algunas de las tecnolog\u00edas que mas he usado a lo largo de mi carrera que comenz\u00f3 all\u00e1 por el a\u00f1o 2003: Flutter, 4 a\u00f1os Dart, 4 a\u00f1os Solidity 1 a\u00f1o HTML, CSS, Javascript, 8 a\u00f1os Bootstrap 8 a\u00f1os PHP, 8 a\u00f1os Jquery, 8 a\u00f1os SQL, Mysql, 8 a\u00f1os MongoDB, ElasticSearch, 4 a\u00f1os GIT, 6 a\u00f1os Scrum, 8 a\u00f1os PMBOK, 8 a\u00f1os Wordpress, 6 a\u00f1os Joomla. 6 a\u00f1os CI/CD, 2 a\u00f1os Habilidades Blandas \u00b6 Soy una persona que se adapta r\u00e1pidamente, que aprende r\u00e1pido, autodidacta y capaz de auto gestionarse eficientemente. Me encanta aprender y experimentar con cosas nuevas. Idiomas \u00b6 Espa\u00f1ol: Nativo English: Intermediate B1 Level \ud83d\udc68\u200d\ud83d\udcbb EXPERIENCIA \u00b6 _CODERIO \u00b6 Febrero 2021 \u2013 Actualidad _coderio es una Software Factory & Staff Augmentation Puesto: Flutter Tech Lead & Senior Flutter Developer Entre mis responsabilidades se encuentran: La creaci\u00f3n de c\u00f3digo escalable y mantenible para diversas aplicaciones realizadas en Flutter & Dart: App de Gruas App Realidad aumentada con IA App de pedidos App de turnos (Flutter Web) Entre Otras La gesti\u00f3n de equipos Interdisciplinarios. Aplicar y verificar el uso de buenas pr\u00e1cticas. La realizaci\u00f3n de Code Review del c\u00f3digo desarrollado por los colaboradores. La integraci\u00f3n y puesta en marcha de los proyectos realizados. La realizaci\u00f3n de propuestas t\u00e9cnicas para los proyectos a realizar. La realizaci\u00f3n de las gu\u00edas y manuales del equipo Flutter. La colaboraci\u00f3n con otras \u00e1reas del equipo. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co Landhi S.A. \u00b6 Enero 2022 \u2013 Actualidad Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Puesto: Colaboraci\u00f3n como Flutter Tech Lead / Senior Flutter Developer Entre mis responsabilidades se encuentran: Entre mis responsabilidades y tareas se encuentran: El desarrollo de la documentaci\u00f3n t\u00e9cnica del desarrollo. La realizaci\u00f3n de la aplicaci\u00f3n mobile (Android/Iphone) de la empresa con Flutter. La gesti\u00f3n del equipo de desarrollo Flutter El Deploy de la apps Flutter en las tiendas (Android/Apple) La colaboraci\u00f3n con otras areas de la empresa aportando mis conocimientos y experiencia. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar PRESSA S.A. \u00b6 Junio 2017 \u2013 Agosto 2020 Pressa es Log\u00edstica Satelital y Seguimiento de veh\u00edculos. Puesto: Semi Senior Fullstack developer Entre mis responsabilidades se encuentran: Full Stack Developer / Project Manager Desarrollo y Gesti\u00f3n de las aplicaciones Android/Iphone de la empresa. Desarrollo de micro servicios en PHP para clientes. Mantenimiento y creaci\u00f3n de nuevos servicios para el sistema web de seguimiento de veh\u00edculos. Comunicaci\u00f3n con clientes recaudando informaci\u00f3n sobre sus necesidades para la creaci\u00f3n de nuevos productos dentro de la compa\u00f1\u00eda. Tecnolog\u00edas M\u00e1s usadas Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar Slarrauri \u00b6 Septiembre 2010 - Junio 2017 (CBA) Slarrauri es mi carrera como Profesional Freelance, emprendedor, Open Source Puesto: Emprendedor y Programador Entre los proyectos que he realizado destaco: Fundador, Desarrollador, dise\u00f1ador y Escritor del Sito Web FacebookEmpresas.com, el mismo brindaba informaci\u00f3n sobre como las empresas podr\u00edan explotar Facebook para su beneficio. (2009) Project Manager y Desarrollador de Betonimous.com, Aplicaci\u00f3n M\u00f3vil que mediante IA intentaba pronosticar resultados deportivos. (2016) Creaci\u00f3n y puesta en Marcha de sistema de VideoChat para particulares Cameruser.com (2007). Desarrollador de sitios web de variadas tem\u00e1ticas utilizando Wordpress. Tecnolog\u00edas M\u00e1s usadas Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. slarrauri.ar IGS \u2013 Sistemas \u00b6 Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas es Desarrollo de sistemas y Realidad Aumentada. Puesto: Project Manager Entre mis responsabilidades se encuentran: Definici\u00f3n de necesidades y propuesta de soluciones de cada proyecto. Coordinaci\u00f3n de tareas de los departamentos de dise\u00f1o, programaci\u00f3n y contenidos. Seguimiento de la estrategia, funcionalidades y objetivos del proyecto Comunicaci\u00f3n con clientes Definici\u00f3n de presupuesto. Tecnolog\u00edas M\u00e1s usadas PMBOK, SCRUM. igs.com.ar Gromac \u00b6 Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac es Sistemas Inform\u00e1ticos Puesto: Semi Senior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de sitios y blogs para el mercado europeo. Realizaci\u00f3n y puesta en marcha de campa\u00f1as de e-marketing para los mismos. Tecnolog\u00edas M\u00e1s usadas PHP, HTML, CSS, Wordpress, Joomla. Grupo 2 Lomas \u00b6 Febrero 2005 \u2013 Diciembre 2006 Grupos 2 Lomas es un Sistema de pago online Puesto: junior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de Medio de Cobro Online. (DataCard, DataPago) Desarrollo y puesta en marcha del plan de marketing online y posicionamiento web. Tecnolog\u00edas M\u00e1s usadas Wordpress, Joomla, PHP, HTML, CSS. \ud83d\udcdd EDUCACI\u00d3N \u00b6 Licenciatura en Filosof\u00eda \u00b6 - Universidad Nacional C\u00f3rdoba. - Incompleto: 2 A\u00f1os de Cursados 2016. Tecnicatura superior en programaci\u00f3n \u00b6 - Universidad Tecnol\u00f3gica Nacional - Incompleto Junio 2003 Instituto Secundario Dr. Manuel Lucero \u00b6 - Titulo: Bachiller T\u00e9cnico Qu\u00edmico. - Finalizado Diciembre 1998 \u2615\ufe0f CURSOS Y CAPACITACIONES \u00b6 Info Nunca parar de aprender es algo que me apasiona por lo que sigo realizando cursos y capacitaciones constantemente, entre ellos: Prework Desarrollo de Aplicaciones Blockchain - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2559-prework-blockchain/diploma/detalle/ Ethereum para Developers - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2560-ethereum-developers/diploma/detalle/ Github Actions - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2683-github-actions/diploma/detalle/ Fundamentos de la Web3 - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2727-fundamentos-web3/diploma/detalle/ Curso de Introducci\u00f3n a Solidity - December 2021 \u00b6 https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/ The Complete Flutter Development Bootcamp with Dart Diciembre 2019 \u00b6 Udemy Negociaci\u00f3n y resoluci\u00f3n de conflictos Enero 2014 - Diciembre 2014 \u00b6 Open2Study - Macquarie Graduate School of Management No est\u00e1 m\u00e1s disponible. La experiencia del usuario en la Web UX/UI Enero 2014 - Diciembre 2014 \u00b6 Open2Study no est\u00e1 m\u00e1s disponible. Principios de la Gesti\u00f3n de Proyectos Enero 2014 - Diciembre 2014 \u00b6 Polytechnic West \u2013 Open2Study Ya no est\u00e1 m\u00e1s disponible. Pensamiento Cient\u00edfico Enero 2014 - Diciembre 2014 \u00b6 Universidad Nacional Aut\u00f3noma de M\u00e9xico \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf Gamification Course Enero 2014 - Diciembre 2014 \u00b6 University of Pennsylvania \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf Programaci\u00f3n Neuroling\u00fc\u00edstica Septiembre 2011 - Junio 2012 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial) #### Din\u00e1micas Sociales Septiembre 2011 - Junio 2012 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial Cl\u00ednica de Ventas Enero 2010 - Diciembre 2011 \u00b6 Cre\u00ed que Sab\u00edas Liderazgo Enero 2010 - Diciembre 2011 \u00b6 Grupo Ases Capacitaci\u00f3n Empresarial Seminario Calidad Norma (ISO 9001) Enero 2010 - Diciembre 2011 \u00b6 Neo-Consultores Ingles Intensivo Nivel 2 Septiembre 2009 - Junio 2010 \u00b6 Step Ahead PNL Personal Enero 2005 - Diciembre 2006 \u00b6 Magdalena Hessel Alonso T\u00e9cnico Dise\u00f1o Gr\u00e1fico Enero 2001 - Diciembre 2002 \u00b6 AES Computaci\u00f3n T\u00e9cnico Dise\u00f1o Web Enero 2001 - Diciembre 2002 \u00b6 AES Computaci\u00f3n T\u00e9cnico Marketing y Comercializaci\u00f3n Enero 1998 - Diciembre 1999 \u00b6 Mercadotecnia Consultores T\u00e9cnico Publicidad e Imagen Corporativa Enero 1998 \u2013 Diciembre \u00b6 Mercadotecnia Consultores","title":"Castellano"},{"location":"cv_castellano/#curriculum-sebastian-larrauri","text":"Descargar como PDF","title":"Curriculum Sebastian Larrauri"},{"location":"cv_castellano/#resumen-habilidades","text":"Summary \ud83d\udd2d Actualmente estoy trabajando desarrollando Flutter/Dart Apps \ud83c\udf31 Estoy Aprendiendo Blockchain, Solidity, DApps and Web3.0 \ud83e\udd14 Busco Colaboradores para la Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry Informaci\u00f3n de Contacto \ud83d\udcf1 +543516200864 \u2709\ufe0f slarrauri@gmail.com \ud83c\udf0e http://slarrauri.ar \ud83d\udc69\u200d\ud83d\udcbb https://github.com/slarrauri \ud83d\udc23 https://twitter.com/slarrauri","title":"\ud83c\udf73 RESUMEN HABILIDADES"},{"location":"cv_castellano/#habilidades-tecnicas","text":"Estas son algunas de las tecnolog\u00edas que mas he usado a lo largo de mi carrera que comenz\u00f3 all\u00e1 por el a\u00f1o 2003: Flutter, 4 a\u00f1os Dart, 4 a\u00f1os Solidity 1 a\u00f1o HTML, CSS, Javascript, 8 a\u00f1os Bootstrap 8 a\u00f1os PHP, 8 a\u00f1os Jquery, 8 a\u00f1os SQL, Mysql, 8 a\u00f1os MongoDB, ElasticSearch, 4 a\u00f1os GIT, 6 a\u00f1os Scrum, 8 a\u00f1os PMBOK, 8 a\u00f1os Wordpress, 6 a\u00f1os Joomla. 6 a\u00f1os CI/CD, 2 a\u00f1os","title":"Habilidades T\u00e9cnicas"},{"location":"cv_castellano/#habilidades-blandas","text":"Soy una persona que se adapta r\u00e1pidamente, que aprende r\u00e1pido, autodidacta y capaz de auto gestionarse eficientemente. Me encanta aprender y experimentar con cosas nuevas.","title":"Habilidades Blandas"},{"location":"cv_castellano/#idiomas","text":"Espa\u00f1ol: Nativo English: Intermediate B1 Level","title":"Idiomas"},{"location":"cv_castellano/#experiencia","text":"","title":"\ud83d\udc68\u200d\ud83d\udcbb EXPERIENCIA "},{"location":"cv_castellano/#_coderio","text":"Febrero 2021 \u2013 Actualidad _coderio es una Software Factory & Staff Augmentation Puesto: Flutter Tech Lead & Senior Flutter Developer Entre mis responsabilidades se encuentran: La creaci\u00f3n de c\u00f3digo escalable y mantenible para diversas aplicaciones realizadas en Flutter & Dart: App de Gruas App Realidad aumentada con IA App de pedidos App de turnos (Flutter Web) Entre Otras La gesti\u00f3n de equipos Interdisciplinarios. Aplicar y verificar el uso de buenas pr\u00e1cticas. La realizaci\u00f3n de Code Review del c\u00f3digo desarrollado por los colaboradores. La integraci\u00f3n y puesta en marcha de los proyectos realizados. La realizaci\u00f3n de propuestas t\u00e9cnicas para los proyectos a realizar. La realizaci\u00f3n de las gu\u00edas y manuales del equipo Flutter. La colaboraci\u00f3n con otras \u00e1reas del equipo. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co","title":"_CODERIO"},{"location":"cv_castellano/#landhi-sa","text":"Enero 2022 \u2013 Actualidad Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Puesto: Colaboraci\u00f3n como Flutter Tech Lead / Senior Flutter Developer Entre mis responsabilidades se encuentran: Entre mis responsabilidades y tareas se encuentran: El desarrollo de la documentaci\u00f3n t\u00e9cnica del desarrollo. La realizaci\u00f3n de la aplicaci\u00f3n mobile (Android/Iphone) de la empresa con Flutter. La gesti\u00f3n del equipo de desarrollo Flutter El Deploy de la apps Flutter en las tiendas (Android/Apple) La colaboraci\u00f3n con otras areas de la empresa aportando mis conocimientos y experiencia. Tecnolog\u00edas M\u00e1s usadas Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar","title":"Landhi S.A."},{"location":"cv_castellano/#pressa-sa","text":"Junio 2017 \u2013 Agosto 2020 Pressa es Log\u00edstica Satelital y Seguimiento de veh\u00edculos. Puesto: Semi Senior Fullstack developer Entre mis responsabilidades se encuentran: Full Stack Developer / Project Manager Desarrollo y Gesti\u00f3n de las aplicaciones Android/Iphone de la empresa. Desarrollo de micro servicios en PHP para clientes. Mantenimiento y creaci\u00f3n de nuevos servicios para el sistema web de seguimiento de veh\u00edculos. Comunicaci\u00f3n con clientes recaudando informaci\u00f3n sobre sus necesidades para la creaci\u00f3n de nuevos productos dentro de la compa\u00f1\u00eda. Tecnolog\u00edas M\u00e1s usadas Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar","title":"PRESSA S.A."},{"location":"cv_castellano/#slarrauri","text":"Septiembre 2010 - Junio 2017 (CBA) Slarrauri es mi carrera como Profesional Freelance, emprendedor, Open Source Puesto: Emprendedor y Programador Entre los proyectos que he realizado destaco: Fundador, Desarrollador, dise\u00f1ador y Escritor del Sito Web FacebookEmpresas.com, el mismo brindaba informaci\u00f3n sobre como las empresas podr\u00edan explotar Facebook para su beneficio. (2009) Project Manager y Desarrollador de Betonimous.com, Aplicaci\u00f3n M\u00f3vil que mediante IA intentaba pronosticar resultados deportivos. (2016) Creaci\u00f3n y puesta en Marcha de sistema de VideoChat para particulares Cameruser.com (2007). Desarrollador de sitios web de variadas tem\u00e1ticas utilizando Wordpress. Tecnolog\u00edas M\u00e1s usadas Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. slarrauri.ar","title":"Slarrauri"},{"location":"cv_castellano/#igs-sistemas","text":"Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas es Desarrollo de sistemas y Realidad Aumentada. Puesto: Project Manager Entre mis responsabilidades se encuentran: Definici\u00f3n de necesidades y propuesta de soluciones de cada proyecto. Coordinaci\u00f3n de tareas de los departamentos de dise\u00f1o, programaci\u00f3n y contenidos. Seguimiento de la estrategia, funcionalidades y objetivos del proyecto Comunicaci\u00f3n con clientes Definici\u00f3n de presupuesto. Tecnolog\u00edas M\u00e1s usadas PMBOK, SCRUM. igs.com.ar","title":"IGS \u2013 Sistemas"},{"location":"cv_castellano/#gromac","text":"Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac es Sistemas Inform\u00e1ticos Puesto: Semi Senior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de sitios y blogs para el mercado europeo. Realizaci\u00f3n y puesta en marcha de campa\u00f1as de e-marketing para los mismos. Tecnolog\u00edas M\u00e1s usadas PHP, HTML, CSS, Wordpress, Joomla.","title":"Gromac"},{"location":"cv_castellano/#grupo-2-lomas","text":"Febrero 2005 \u2013 Diciembre 2006 Grupos 2 Lomas es un Sistema de pago online Puesto: junior Fullstack Developer Entre mis responsabilidades se encuentran: Desarrollador Web Desarrollo de Medio de Cobro Online. (DataCard, DataPago) Desarrollo y puesta en marcha del plan de marketing online y posicionamiento web. Tecnolog\u00edas M\u00e1s usadas Wordpress, Joomla, PHP, HTML, CSS.","title":"Grupo 2 Lomas"},{"location":"cv_castellano/#educacion","text":"","title":"\ud83d\udcdd EDUCACI\u00d3N "},{"location":"cv_castellano/#licenciatura-en-filosofia","text":"- Universidad Nacional C\u00f3rdoba. - Incompleto: 2 A\u00f1os de Cursados 2016.","title":"Licenciatura en Filosof\u00eda"},{"location":"cv_castellano/#tecnicatura-superior-en-programacion","text":"- Universidad Tecnol\u00f3gica Nacional - Incompleto Junio 2003","title":"Tecnicatura superior en programaci\u00f3n"},{"location":"cv_castellano/#instituto-secundario-dr-manuel-lucero","text":"- Titulo: Bachiller T\u00e9cnico Qu\u00edmico. - Finalizado Diciembre 1998","title":"Instituto Secundario Dr. Manuel Lucero"},{"location":"cv_castellano/#cursos-y-capacitaciones","text":"Info Nunca parar de aprender es algo que me apasiona por lo que sigo realizando cursos y capacitaciones constantemente, entre ellos:","title":"\u2615\ufe0f CURSOS Y CAPACITACIONES"},{"location":"cv_castellano/#prework-desarrollo-de-aplicaciones-blockchain-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2559-prework-blockchain/diploma/detalle/","title":"Prework Desarrollo de Aplicaciones Blockchain  - 2022"},{"location":"cv_castellano/#ethereum-para-developers-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2560-ethereum-developers/diploma/detalle/","title":"Ethereum para Developers  - 2022"},{"location":"cv_castellano/#github-actions-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2683-github-actions/diploma/detalle/","title":"Github Actions - 2022"},{"location":"cv_castellano/#fundamentos-de-la-web3-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2727-fundamentos-web3/diploma/detalle/","title":"Fundamentos de la Web3 - 2022"},{"location":"cv_castellano/#curso-de-introduccion-a-solidity-december-2021","text":"https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/","title":"Curso de Introducci\u00f3n a Solidity - December 2021"},{"location":"cv_castellano/#the-complete-flutter-development-bootcamp-with-dart-diciembre-2019","text":"Udemy","title":"The Complete Flutter Development Bootcamp with Dart Diciembre 2019"},{"location":"cv_castellano/#negociacion-y-resolucion-de-conflictos-enero-2014-diciembre-2014","text":"Open2Study - Macquarie Graduate School of Management No est\u00e1 m\u00e1s disponible.","title":"Negociaci\u00f3n y resoluci\u00f3n de conflictos Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#la-experiencia-del-usuario-en-la-web-uxui-enero-2014-diciembre-2014","text":"Open2Study no est\u00e1 m\u00e1s disponible.","title":"La experiencia del usuario en la Web UX/UI Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#principios-de-la-gestion-de-proyectos-enero-2014-diciembre-2014","text":"Polytechnic West \u2013 Open2Study Ya no est\u00e1 m\u00e1s disponible.","title":"Principios de la Gesti\u00f3n de Proyectos Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#pensamiento-cientifico-enero-2014-diciembre-2014","text":"Universidad Nacional Aut\u00f3noma de M\u00e9xico \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf","title":"Pensamiento Cient\u00edfico Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#gamification-course-enero-2014-diciembre-2014","text":"University of Pennsylvania \u2013 Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf","title":"Gamification Course Enero 2014 - Diciembre 2014"},{"location":"cv_castellano/#programacion-neurolinguistica-septiembre-2011-junio-2012","text":"Grupo Ases Capacitaci\u00f3n Empresarial)","title":"Programaci\u00f3n Neuroling\u00fc\u00edstica Septiembre 2011 - Junio 2012"},{"location":"cv_castellano/#dinamicas-sociales-septiembre-2011-junio-2012","text":"Grupo Ases Capacitaci\u00f3n Empresarial","title":"#### Din\u00e1micas Sociales Septiembre 2011 - Junio 2012"},{"location":"cv_castellano/#clinica-de-ventas-enero-2010-diciembre-2011","text":"Cre\u00ed que Sab\u00edas","title":"Cl\u00ednica de Ventas Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#liderazgo-enero-2010-diciembre-2011","text":"Grupo Ases Capacitaci\u00f3n Empresarial","title":"Liderazgo Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#seminario-calidad-norma-iso-9001-enero-2010-diciembre-2011","text":"Neo-Consultores","title":"Seminario Calidad Norma (ISO 9001) Enero 2010 - Diciembre 2011"},{"location":"cv_castellano/#ingles-intensivo-nivel-2-septiembre-2009-junio-2010","text":"Step Ahead","title":"Ingles Intensivo Nivel 2 Septiembre 2009 - Junio 2010"},{"location":"cv_castellano/#pnl-personal-enero-2005-diciembre-2006","text":"Magdalena Hessel Alonso","title":"PNL Personal Enero 2005 - Diciembre 2006"},{"location":"cv_castellano/#tecnico-diseno-grafico-enero-2001-diciembre-2002","text":"AES Computaci\u00f3n","title":"T\u00e9cnico Dise\u00f1o Gr\u00e1fico Enero 2001 - Diciembre 2002"},{"location":"cv_castellano/#tecnico-diseno-web-enero-2001-diciembre-2002","text":"AES Computaci\u00f3n","title":"T\u00e9cnico Dise\u00f1o Web Enero 2001 - Diciembre 2002"},{"location":"cv_castellano/#tecnico-marketing-y-comercializacion-enero-1998-diciembre-1999","text":"Mercadotecnia Consultores","title":"T\u00e9cnico Marketing y Comercializaci\u00f3n Enero 1998 - Diciembre 1999"},{"location":"cv_castellano/#tecnico-publicidad-e-imagen-corporativa-enero-1998-diciembre","text":"Mercadotecnia Consultores","title":"T\u00e9cnico Publicidad e Imagen Corporativa Enero 1998 \u2013 Diciembre"},{"location":"cv_english/","text":"Curriculum Sebastian Larrauri \u00b6 Download As PDF \ud83c\udf73 SKILLS SUMMARY \u00b6 Summary \ud83d\udd2d I\u2019m currently working on Flutter/Dart Apps \ud83c\udf31 I\u2019m currently learning Blockchain, Solidity, DApps, and Web3.0 \ud83e\udd14 I\u2019m looking for help with The Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry Contact Information \ud83d\udcf1 +543516200864 \u2709\ufe0f slarrauri@gmail.com \ud83c\udf0e http://slarrauri.ar \ud83d\udc69\u200d\ud83d\udcbb https://github.com/slarrauri \ud83d\udc23 https://twitter.com/slarrauri Technical Skills \u00b6 These are some of the technologies that I use in the developments in which I have worked throughout the 20 years of experience in the Tech Industry: Flutter, 4 years Dart, 4 years Solidity 1 year HTML, CSS, Javascript, 8 years Bootstrap 8 years PHP, 8 years Jquery, 8 years SQL, Mysql, 8 years MongoDB, ElasticSearch, 4 years GIT, 6 years Scrum, 8 years PMBOK, 8 years Wordpress, 6 years Joomla. 6 years CI/CD, 2 years Soft Skills \u00b6 I am a person who adapts quickly, is a fast learner, is self-taught and is capable of efficient self-management. I love learning and experimenting with new things. Languages \u00b6 Spanish: Nativo English: Intermediate B1 Level \ud83d\udc68\u200d\ud83d\udcbb EXPERIENCE \u00b6 _CODERIO \u00b6 February 2021 \u2013 Present _coderio is a Software Factory & Staff Augmentation Position: Flutter Tech Lead & Senior Flutter Developer Among my responsibilities and daily tasks are: The creation of scalable and maintainable code for various applications made in Flutter & Dart.: Crane App Augmented Reality with IA App Delivery App App de turnos (Flutter Web) The management of Interdisciplinary teams to carry out projects for various clients. Apply and verify the use of good practices Carrying out Code Review of the code developed by the collaborators. The integration and implementation of the projects carried out. (DevOps, CD / CI). The realization of technical proposals for the projects to be carried out. The realization of the guides and manuals of the Flutter team on Best Practices, Style Conventions, Use of Git and Git Flow. Collaboration with other areas such as Design, QA, Functional Analysis, Development, contributing my experience and how-to-know, in the improvement of their processes and developments. Technologies Most Used Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co Landhi S.A. \u00b6 January 2022 - March 2022 Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Position: Collaboration as Flutter Tech Lead / Senior Flutter Developer Among my responsibilities and daily tasks are: The development of the technical documentation of the development. The realization of the mobile application (Android / Iphone) of the company with Flutter. Managing the Flutter development team The Deploy of the Flutter apps in the stores (Android / Apple) Technologies Most Used Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar PRESSA S.A. \u00b6 Junio June 2017 - August 2020 Pressa is Satellite Logistics and Vehicle Tracking. Position: Semi Senior Fullstack developer Among my responsibilities and daily tasks are: Development and Management of the company's Android / Iphone applications. Development of micro services in PHP for clients. Maintenance and creation of new services for the vehicle tracking web system. Communication with clients collecting information about their needs for the creation of new products within the company. Technologies Most Used Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar Slarrauri \u00b6 September 2010 - June 2017 Slarrauri is my career as a Freelancer Position: Developer Among my responsibilities and daily tasks are: Founder, Developer, designer and Writer of the FacebookEmpresas.com website, he provided information on how companies could exploit Facebook for their benefit. ( 2009 ) Project Manager and Developer of Betonimous.com , a Mobile Application that, using AI, tried to predict sports results to place the corresponding bets. ( 2016 ) Creation and start-up of a VideoChat system for individuals Cameruser.com (2007). Developer of websites of various themes using Wordpress. Technologies Most Used Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. slarrauri.ar IGS \u2013 Sistemas \u00b6 Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas is Systems Development and Augmented Reality. Position: Project Manager Among my responsibilities and daily tasks are: Definition of needs and proposal of solutions for each project. Coordination of tasks of the design, programming and content departments. Monitoring of the strategy, functionalities and objectives of the project Communication with clients Definition of budget. Technologies Most Used PMBOK, SCRUM. igs.com.ar Gromac \u00b6 Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac is Computer Systems Position: Semi Senior Fullstack Developer Among my responsibilities and daily tasks are: Development of sites and blogs for the European market. Carrying out and launching e-marketing campaigns for them. Technologies Most Used PHP, HTML, CSS, Wordpress, Joomla. Grupo 2 Lomas \u00b6 February 2005 - December 2006 Grupos 2 Lomas is an online payment system Position: junior Fullstack Developer Among my responsibilities and daily tasks are: Development of Online Collection Means. (DataCard, DataPago) Development and implementation of the online marketing plan and web positioning. Technologies Most Used Wordpress, Joomla, PHP, HTML, CSS. \ud83d\udcdd EDUCACI\u00d3N \u00b6 Degree in Philosophy \u00b6 - Universidad Nacional C\u00f3rdoba. - Incomplete: 2 Years of Graduates. Higher technical degree in programming \u00b6 - Universidad Tecnol\u00f3gica Nacional - Incomplete Junio 2003 Chemical Technical Bachelor \u00b6 - Secondary Institute Dr. Manuel Lucero - Completed Diciembre 1998 \u2615\ufe0f COURSES AND TRAININGS \u00b6 Info Never stop learning is something that I am passionate about, so I continue to constantly take courses and trainings, including: Introduction to Blockchain Development: Smart Contracts - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/course/2561-smart-contracts/diploma/detalle/ Prework Development of Blockchain Applications - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2559-prework-blockchain/diploma/detalle/ Ethereum for Developers - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2560-ethereum-developers/diploma/detalle/ Github Actions - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2683-github-actions/diploma/detalle/ Fundamentals of the - 2022 \u00b6 Platzi https://platzi.com/p/slarrauri/curso/2727-fundamentos-web3/diploma/detalle/ Introductory Course to Solidity December 2021 \u00b6 https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/ The Complete Flutter Development Bootcamp with Dart December 2019 \u00b6 Udemy Negotiation and conflict resolution January 2014 - December 2014 \u00b6 Macquarie Graduate School of Management - Open2Study is no longer available. User experience on the Web UX / UI January 2014 - December 2014 \u00b6 Open2Study is no longer available. Principles of Project Management January 2014 - December 2014 \u00b6 Polytechnic West - Open2Study is no longer available. Scientific Thinking January 2014 - December 2014 \u00b6 National Autonomous University of Mexico - Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf Gamification Course January 2014 - December 2014 \u00b6 University of Pennsylvania - Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf Neurolinguistic Programming September 2011 - June 2012 \u00b6 Business Training Advisory Group) Social Dynamics September 2011 - June 2012 \u00b6 Business Training Advisory Group Sales Clinic January 2010 - December 2011 \u00b6 I thought you knew Leadership January 2010 - December 2011 \u00b6 Business Training Advisory Group Standard Quality Seminar (ISO 9001) January 2010 - December 2011 \u00b6 Neo-Consultants Intensive English Level 2 September 2009 - June 2010 \u00b6 Step Ahead Personal NLP January 2005 - December 2006 \u00b6 Magdalena Hessel Alonso Graphic Design Technician January 2001 - December 2002 \u00b6 AES Computing Web Design Technician January 2001 - December 2002 \u00b6 AES Computing Marketing and Marketing Technician January 1998 - December 1999 \u00b6 Marketing Consultants Advertising and Corporate Image Technician January 1998 - December \u00b6 Marketing Consultants","title":"English"},{"location":"cv_english/#curriculum-sebastian-larrauri","text":"Download As PDF","title":"Curriculum Sebastian Larrauri"},{"location":"cv_english/#skills-summary","text":"Summary \ud83d\udd2d I\u2019m currently working on Flutter/Dart Apps \ud83c\udf31 I\u2019m currently learning Blockchain, Solidity, DApps, and Web3.0 \ud83e\udd14 I\u2019m looking for help with The Flutter Developers Guide \u26a1 Fun fact: Fan of the Birra! \u2764\ufe0f Love Tech Industry Contact Information \ud83d\udcf1 +543516200864 \u2709\ufe0f slarrauri@gmail.com \ud83c\udf0e http://slarrauri.ar \ud83d\udc69\u200d\ud83d\udcbb https://github.com/slarrauri \ud83d\udc23 https://twitter.com/slarrauri","title":"\ud83c\udf73 SKILLS SUMMARY"},{"location":"cv_english/#technical-skills","text":"These are some of the technologies that I use in the developments in which I have worked throughout the 20 years of experience in the Tech Industry: Flutter, 4 years Dart, 4 years Solidity 1 year HTML, CSS, Javascript, 8 years Bootstrap 8 years PHP, 8 years Jquery, 8 years SQL, Mysql, 8 years MongoDB, ElasticSearch, 4 years GIT, 6 years Scrum, 8 years PMBOK, 8 years Wordpress, 6 years Joomla. 6 years CI/CD, 2 years","title":"Technical Skills"},{"location":"cv_english/#soft-skills","text":"I am a person who adapts quickly, is a fast learner, is self-taught and is capable of efficient self-management. I love learning and experimenting with new things.","title":"Soft Skills"},{"location":"cv_english/#languages","text":"Spanish: Nativo English: Intermediate B1 Level","title":"Languages"},{"location":"cv_english/#experience","text":"","title":"\ud83d\udc68\u200d\ud83d\udcbb EXPERIENCE "},{"location":"cv_english/#_coderio","text":"February 2021 \u2013 Present _coderio is a Software Factory & Staff Augmentation Position: Flutter Tech Lead & Senior Flutter Developer Among my responsibilities and daily tasks are: The creation of scalable and maintainable code for various applications made in Flutter & Dart.: Crane App Augmented Reality with IA App Delivery App App de turnos (Flutter Web) The management of Interdisciplinary teams to carry out projects for various clients. Apply and verify the use of good practices Carrying out Code Review of the code developed by the collaborators. The integration and implementation of the projects carried out. (DevOps, CD / CI). The realization of technical proposals for the projects to be carried out. The realization of the guides and manuals of the Flutter team on Best Practices, Style Conventions, Use of Git and Git Flow. Collaboration with other areas such as Design, QA, Functional Analysis, Development, contributing my experience and how-to-know, in the improvement of their processes and developments. Technologies Most Used Flutter, Dart, Git, Scrum, Bitrise, AppCenter, Firebase, DevOps, CD/CD entre otras. coderio.co","title":"_CODERIO"},{"location":"cv_english/#landhi-sa","text":"January 2022 - March 2022 Landhi is an online community that connects home improvement professionals, homeowners, and home & decor stores through visual search technology Position: Collaboration as Flutter Tech Lead / Senior Flutter Developer Among my responsibilities and daily tasks are: The development of the technical documentation of the development. The realization of the mobile application (Android / Iphone) of the company with Flutter. Managing the Flutter development team The Deploy of the Flutter apps in the stores (Android / Apple) Technologies Most Used Flutter, Dart, Scrum, Bitrise, AppCenter, Git, AppCenter, Firebase... landhi.com.ar","title":"Landhi S.A."},{"location":"cv_english/#pressa-sa","text":"Junio June 2017 - August 2020 Pressa is Satellite Logistics and Vehicle Tracking. Position: Semi Senior Fullstack developer Among my responsibilities and daily tasks are: Development and Management of the company's Android / Iphone applications. Development of micro services in PHP for clients. Maintenance and creation of new services for the vehicle tracking web system. Communication with clients collecting information about their needs for the creation of new products within the company. Technologies Most Used Bootstrap, Javascript, Jquery, PHP, ElasticSearch, Mysql, Python, Cordova, HTML, CSS, MongoDB, AWS, Linux Ubuntu Server, Flutter, Dart. pressa.com.ar","title":"PRESSA S.A."},{"location":"cv_english/#slarrauri","text":"September 2010 - June 2017 Slarrauri is my career as a Freelancer Position: Developer Among my responsibilities and daily tasks are: Founder, Developer, designer and Writer of the FacebookEmpresas.com website, he provided information on how companies could exploit Facebook for their benefit. ( 2009 ) Project Manager and Developer of Betonimous.com , a Mobile Application that, using AI, tried to predict sports results to place the corresponding bets. ( 2016 ) Creation and start-up of a VideoChat system for individuals Cameruser.com (2007). Developer of websites of various themes using Wordpress. Technologies Most Used Wordpress, Bootstrap, Javascript, Jquery, PHP, Mysql, HTML, CSS, Cpanel, Git, Flutter, Dart, WebRtc. slarrauri.ar","title":"Slarrauri"},{"location":"cv_english/#igs-sistemas","text":"Diciembre 2008 \u2013 Agosto 2010 IGS-Sistemas is Systems Development and Augmented Reality. Position: Project Manager Among my responsibilities and daily tasks are: Definition of needs and proposal of solutions for each project. Coordination of tasks of the design, programming and content departments. Monitoring of the strategy, functionalities and objectives of the project Communication with clients Definition of budget. Technologies Most Used PMBOK, SCRUM. igs.com.ar","title":"IGS \u2013 Sistemas"},{"location":"cv_english/#gromac","text":"Febrero 2006 \u2013 Enero 2008 (Espa\u00f1a) Gromac is Computer Systems Position: Semi Senior Fullstack Developer Among my responsibilities and daily tasks are: Development of sites and blogs for the European market. Carrying out and launching e-marketing campaigns for them. Technologies Most Used PHP, HTML, CSS, Wordpress, Joomla.","title":"Gromac"},{"location":"cv_english/#grupo-2-lomas","text":"February 2005 - December 2006 Grupos 2 Lomas is an online payment system Position: junior Fullstack Developer Among my responsibilities and daily tasks are: Development of Online Collection Means. (DataCard, DataPago) Development and implementation of the online marketing plan and web positioning. Technologies Most Used Wordpress, Joomla, PHP, HTML, CSS.","title":"Grupo 2 Lomas"},{"location":"cv_english/#educacion","text":"","title":"\ud83d\udcdd EDUCACI\u00d3N "},{"location":"cv_english/#degree-in-philosophy","text":"- Universidad Nacional C\u00f3rdoba. - Incomplete: 2 Years of Graduates.","title":"Degree in Philosophy"},{"location":"cv_english/#higher-technical-degree-in-programming","text":"- Universidad Tecnol\u00f3gica Nacional - Incomplete Junio 2003","title":"Higher technical degree in programming"},{"location":"cv_english/#chemical-technical-bachelor","text":"- Secondary Institute Dr. Manuel Lucero - Completed Diciembre 1998","title":"Chemical Technical Bachelor"},{"location":"cv_english/#courses-and-trainings","text":"Info Never stop learning is something that I am passionate about, so I continue to constantly take courses and trainings, including:","title":"\u2615\ufe0f COURSES AND TRAININGS"},{"location":"cv_english/#introduction-to-blockchain-development-smart-contracts-2022","text":"Platzi https://platzi.com/p/slarrauri/course/2561-smart-contracts/diploma/detalle/","title":"Introduction to Blockchain Development: Smart Contracts  - 2022"},{"location":"cv_english/#prework-development-of-blockchain-applications-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2559-prework-blockchain/diploma/detalle/","title":"Prework Development of Blockchain Applications - 2022"},{"location":"cv_english/#ethereum-for-developers-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2560-ethereum-developers/diploma/detalle/","title":"Ethereum for Developers - 2022"},{"location":"cv_english/#github-actions-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2683-github-actions/diploma/detalle/","title":"Github Actions - 2022"},{"location":"cv_english/#fundamentals-of-the-2022","text":"Platzi https://platzi.com/p/slarrauri/curso/2727-fundamentos-web3/diploma/detalle/","title":"Fundamentals of the - 2022"},{"location":"cv_english/#introductory-course-to-solidity-december-2021","text":"https://platzi.com/p/slarrauri/course/2576-solidity/diploma/detalle/","title":"Introductory Course to Solidity December 2021"},{"location":"cv_english/#the-complete-flutter-development-bootcamp-with-dart-december-2019","text":"Udemy","title":"The Complete Flutter Development Bootcamp with Dart December 2019"},{"location":"cv_english/#negotiation-and-conflict-resolution-january-2014-december-2014","text":"Macquarie Graduate School of Management - Open2Study is no longer available.","title":"Negotiation and conflict resolution January 2014 - December 2014"},{"location":"cv_english/#user-experience-on-the-web-ux-ui-january-2014-december-2014","text":"Open2Study is no longer available.","title":"User experience on the Web UX / UI January 2014 - December 2014"},{"location":"cv_english/#principles-of-project-management-january-2014-december-2014","text":"Polytechnic West - Open2Study is no longer available.","title":"Principles of Project Management January 2014 - December 2014"},{"location":"cv_english/#scientific-thinking-january-2014-december-2014","text":"National Autonomous University of Mexico - Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971480~5039757/pdf","title":"Scientific Thinking January 2014 - December 2014"},{"location":"cv_english/#gamification-course-january-2014-december-2014","text":"University of Pennsylvania - Coursera.org https://www.coursera.org/api/legacyCertificates.v1/spark/statementOfAccomplishment/971638~5039757/pdf","title":"Gamification Course January 2014 - December 2014"},{"location":"cv_english/#neurolinguistic-programming-september-2011-june-2012","text":"Business Training Advisory Group)","title":"Neurolinguistic Programming September 2011 - June 2012"},{"location":"cv_english/#social-dynamics-september-2011-june-2012","text":"Business Training Advisory Group","title":"Social Dynamics September 2011 - June 2012"},{"location":"cv_english/#sales-clinic-january-2010-december-2011","text":"I thought you knew","title":"Sales Clinic January 2010 - December 2011"},{"location":"cv_english/#leadership-january-2010-december-2011","text":"Business Training Advisory Group","title":"Leadership January 2010 - December 2011"},{"location":"cv_english/#standard-quality-seminar-iso-9001-january-2010-december-2011","text":"Neo-Consultants","title":"Standard Quality Seminar (ISO 9001) January 2010 - December 2011"},{"location":"cv_english/#intensive-english-level-2-september-2009-june-2010","text":"Step Ahead","title":"Intensive English Level 2 September 2009 - June 2010"},{"location":"cv_english/#personal-nlp-january-2005-december-2006","text":"Magdalena Hessel Alonso","title":"Personal NLP January 2005 - December 2006"},{"location":"cv_english/#graphic-design-technician-january-2001-december-2002","text":"AES Computing","title":"Graphic Design Technician January 2001 - December 2002"},{"location":"cv_english/#web-design-technician-january-2001-december-2002","text":"AES Computing","title":"Web Design Technician January 2001 - December 2002"},{"location":"cv_english/#marketing-and-marketing-technician-january-1998-december-1999","text":"Marketing Consultants","title":"Marketing and Marketing Technician January 1998 - December 1999"},{"location":"cv_english/#advertising-and-corporate-image-technician-january-1998-december","text":"Marketing Consultants","title":"Advertising and Corporate Image Technician January 1998 - December"},{"location":"proyectos/","text":"Pagina en Construcci\u00f3n En esta seccion encontraras los proyectos open source que he desarrollado. Dart & Flutter: The Professional Path to learn it! The Flutter Developer Guide","title":"Proyectos"},{"location":"blog/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Blog \u00b6 The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading","title":"The past, present and future"},{"location":"blog/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading","title":"Excluding content from search"},{"location":"blog/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Search: better, faster, smaller"},{"location":"blog/2021/excluding-content-from-search/","text":"Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that . Prior art \u00b6 MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation. What's new? \u00b6 The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it. Excluding pages \u00b6 An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] } Conclusion \u00b6 The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that .","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#prior-art","text":"MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation.","title":"Prior art"},{"location":"blog/2021/excluding-content-from-search/#whats-new","text":"The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.","title":"What's new?"},{"location":"blog/2021/excluding-content-from-search/#excluding-pages","text":"An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ...","title":"Excluding pages"},{"location":"blog/2021/excluding-content-from-search/#excluding-sections","text":"If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"blog/2021/excluding-content-from-search/#excluding-blocks","text":"If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] }","title":"Excluding blocks"},{"location":"blog/2021/excluding-content-from-search/#conclusion","text":"The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Conclusion"},{"location":"blog/2021/search-better-faster-smaller/","text":"Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that . Architecture \u00b6 Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER Search index \u00b6 The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews. Search worker \u00b6 The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index. Search previews \u00b6 Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block. What's new? \u00b6 After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects. Rich search previews \u00b6 As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization . Tokenizer lookahead \u00b6 The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4 Case changes \u00b6 Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5 Version numbers \u00b6 Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes. HTML/XML tags \u00b6 If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section. Accurate highlighting \u00b6 Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter . Benchmarks \u00b6 We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once. User interface \u00b6 Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly. What's next? \u00b6 Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that .","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#architecture","text":"Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER","title":"Architecture"},{"location":"blog/2021/search-better-faster-smaller/#search-index","text":"The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.","title":"Search index"},{"location":"blog/2021/search-better-faster-smaller/#search-worker","text":"The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index.","title":"Search worker"},{"location":"blog/2021/search-better-faster-smaller/#search-previews","text":"Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block.","title":"Search previews"},{"location":"blog/2021/search-better-faster-smaller/#whats-new","text":"After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects.","title":"What's new?"},{"location":"blog/2021/search-better-faster-smaller/#rich-search-previews","text":"As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization .","title":"Rich search previews"},{"location":"blog/2021/search-better-faster-smaller/#tokenizer-lookahead","text":"The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4","title":"Tokenizer lookahead"},{"location":"blog/2021/search-better-faster-smaller/#case-changes","text":"Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5","title":"Case changes"},{"location":"blog/2021/search-better-faster-smaller/#version-numbers","text":"Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes.","title":"Version numbers"},{"location":"blog/2021/search-better-faster-smaller/#htmlxml-tags","text":"If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.","title":"HTML/XML tags"},{"location":"blog/2021/search-better-faster-smaller/#accurate-highlighting","text":"Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter .","title":"Accurate highlighting"},{"location":"blog/2021/search-better-faster-smaller/#benchmarks","text":"We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.","title":"Benchmarks"},{"location":"blog/2021/search-better-faster-smaller/#user-interface","text":"Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.","title":"User interface"},{"location":"blog/2021/search-better-faster-smaller/#whats-next","text":"Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"What's next?"},{"location":"blog/2021/the-past-present-and-future/","text":"The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project. A little history \u00b6 In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021. 2021 in numbers \u00b6 2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world. Features \u00b6 It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times. Funding \u00b6 In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide. 2022 \u00b6 Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#a-little-history","text":"In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021.","title":"A little history"},{"location":"blog/2021/the-past-present-and-future/#2021-in-numbers","text":"2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world.","title":"2021 in numbers"},{"location":"blog/2021/the-past-present-and-future/#features","text":"It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times.","title":"Features"},{"location":"blog/2021/the-past-present-and-future/#funding","text":"In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide.","title":"Funding"},{"location":"blog/2021/the-past-present-and-future/#2022","text":"Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"2022"},{"location":"coding_notes/","text":"Coding Notes \u00b6 En esta secci\u00f3n encontrar\u00e1s mis notas sobre distintos lenguajes de programaci\u00f3n y temas relacionados con la creaci\u00f3n de c\u00f3digo. He creado esta secci\u00f3n para que me sirva de referencia personal, por lo tanto no explico con detalle lo expuesto en la misma. Contenido \u00b6 - De todo un poco - Javascript (Doing) - Dart (TODO) - Flutter (TODO) - Solidity (Doing)","title":"Coding Notes"},{"location":"coding_notes/#coding-notes","text":"En esta secci\u00f3n encontrar\u00e1s mis notas sobre distintos lenguajes de programaci\u00f3n y temas relacionados con la creaci\u00f3n de c\u00f3digo. He creado esta secci\u00f3n para que me sirva de referencia personal, por lo tanto no explico con detalle lo expuesto en la misma.","title":"Coding Notes"},{"location":"coding_notes/#contenido","text":"- De todo un poco - Javascript (Doing) - Dart (TODO) - Flutter (TODO) - Solidity (Doing)","title":"Contenido"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/","text":"Convenciones de estilos \u00b6 Si bien cada lenguaje de programaci\u00f3n tiene su gu\u00eda de estilo y su propia forma de escribir c\u00f3digo. En esta seccion describo en lineas generales cuales son los mas usados y para que se usa cada estilo. camelCase \u00b6 Esta notacion empieza con la primera letra de la palabra en minuscula y las palabras siguientes con la primera letra en may\u00fascula. Tambi\u00e9n llamada lowerCamelCase. Ejemplos camelCase nombre segundoNombre Se usa en: variables, argumentos, propiedades. PascalCase \u00b6 Pascal Case usa el inicio de cada palabra en may\u00fasculas. Tambien llamada UpperCamelCase. Ejemplos PascalCase Apellido SegundoApellido Se usa en: Classes, enums, typedefs, extensions. snake_case \u00b6 La notacion snake_case utiliza todas las letras en minisculas separadas por un guion bajo o underscore. Ejemplos snake_case edad_del_perro Se usa en: Declaracion de campos de base de datos y en la declaraci\u00f3n de variables, nombres de archivos SCREAMING_SNAKE_CASE \u00b6 Esta notaci\u00f3n al igual que la anterior utiliza las palabras separadas por guion bajo, pero se escribe todo en may\u00fasculas. Ejemplos SCREAMING_SNAKE_CASE PI COLOR_FUENTE Se usa en: Declaracion de variables constantes kebab-case \u00b6 Al igual que snake_case utiliza todas las palabras en minusculas pero separadas por guiones. Ejemplos kebab-case url-del-blog Se usa en: En las Urls, nombres de branch, nombres de paquetes Train-Case \u00b6 Es una variedad de kebab-case pero utiliza la primera letra de cada palabra en may\u00fasculas. Ejemplos Train-Case Esta-Es-La-Muestra Se usa en: Nombres de archivos. UPPERCASE \u00b6 Esta notaci\u00f3n consiste en escribir toda la palabra en may\u00fasculas, generalmente se usa cuando se trata de una palabra. Ejemplos UPPERCASE README CHANGELOG Se usa en: Nombres de archivos como el readme.md Notaci\u00f3n H\u00fangara \u00b6 La notaci\u00f3n consiste en a\u00f1adir prefijos en min\u00fasculas seguidos de la palabra con la primer letra en mayusculas. Los prefijos indican un tipo de variable, por ejemplo cActivado = color activado. Ejemplos cFondo kPi Se usa en: nombres de variables, instancias de objetos.","title":"Convenciones de estilos"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#convenciones-de-estilos","text":"Si bien cada lenguaje de programaci\u00f3n tiene su gu\u00eda de estilo y su propia forma de escribir c\u00f3digo. En esta seccion describo en lineas generales cuales son los mas usados y para que se usa cada estilo.","title":"Convenciones de estilos"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#camelcase","text":"Esta notacion empieza con la primera letra de la palabra en minuscula y las palabras siguientes con la primera letra en may\u00fascula. Tambi\u00e9n llamada lowerCamelCase. Ejemplos camelCase nombre segundoNombre Se usa en: variables, argumentos, propiedades.","title":"camelCase"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#pascalcase","text":"Pascal Case usa el inicio de cada palabra en may\u00fasculas. Tambien llamada UpperCamelCase. Ejemplos PascalCase Apellido SegundoApellido Se usa en: Classes, enums, typedefs, extensions.","title":"PascalCase"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#snake_case","text":"La notacion snake_case utiliza todas las letras en minisculas separadas por un guion bajo o underscore. Ejemplos snake_case edad_del_perro Se usa en: Declaracion de campos de base de datos y en la declaraci\u00f3n de variables, nombres de archivos","title":"snake_case"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#screaming_snake_case","text":"Esta notaci\u00f3n al igual que la anterior utiliza las palabras separadas por guion bajo, pero se escribe todo en may\u00fasculas. Ejemplos SCREAMING_SNAKE_CASE PI COLOR_FUENTE Se usa en: Declaracion de variables constantes","title":"SCREAMING_SNAKE_CASE"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#kebab-case","text":"Al igual que snake_case utiliza todas las palabras en minusculas pero separadas por guiones. Ejemplos kebab-case url-del-blog Se usa en: En las Urls, nombres de branch, nombres de paquetes","title":"kebab-case"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#train-case","text":"Es una variedad de kebab-case pero utiliza la primera letra de cada palabra en may\u00fasculas. Ejemplos Train-Case Esta-Es-La-Muestra Se usa en: Nombres de archivos.","title":"Train-Case"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#uppercase","text":"Esta notaci\u00f3n consiste en escribir toda la palabra en may\u00fasculas, generalmente se usa cuando se trata de una palabra. Ejemplos UPPERCASE README CHANGELOG Se usa en: Nombres de archivos como el readme.md","title":"UPPERCASE"},{"location":"coding_notes/de_todo_un_poco/convenciones_de_estilos/#notacion-hungara","text":"La notaci\u00f3n consiste en a\u00f1adir prefijos en min\u00fasculas seguidos de la palabra con la primer letra en mayusculas. Los prefijos indican un tipo de variable, por ejemplo cActivado = color activado. Ejemplos cFondo kPi Se usa en: nombres de variables, instancias de objetos.","title":"Notaci\u00f3n H\u00fangara"},{"location":"coding_notes/javascript/01_javascript_basico/","text":"JavaScript B\u00e1sico \u00b6 Comentarios \u00b6 Info Los comentarios son l\u00edneas de c\u00f3digo que el compilador omite. Son muy usados para documentar el c\u00f3digo y recordar que hace el mismo. Comentario de una linea // esto es un comentartio Comentario de multiples lineas /* Esto es un comentartio de multiples lineas */ Comentarios para documentaci\u00f3n Existe un tercer tipo de comentario que es para generar la documentaci\u00f3n del proyecto o c\u00f3digo que estemos creando. Cuidad al documentar Si bien la documentaci\u00f3n del proyecto es muy importante para que otros programadores entienda f\u00e1cilmente el c\u00f3digo escrito es importante recordad que el c\u00f3digo debe ser autoexplicativo evitando documentar innecesariamente. Ya que cuando actualicemos el c\u00f3digo tambi\u00e9n tenemos que actualizar la documentaci\u00f3n. \u00dasala sabiamente. Por lo general un comentario de documentacion lucera como el siguiente: /* /** * Represents a book. * @constructor * @param {string} title - The title of the book. * @param {string} author - The author of the book. */ function Book ( title , author ) { } * / Documentar un proyecto es todo un t\u00f3pico, aqu\u00ed hay algunos enlaces de inter\u00e9s: M\u00e1s Info sobre documentaci\u00f3n en JS https://jsdoc.app/ https://developer.wordpress.org/coding-standards/inline-documentation-standards/javascript/ Variables \u00b6 Tipo de datos undefined , null , boolean , string , symbol , bigint , number , y object declarar una variable y asignarle un valor: var myVar ; // undefined myVar = 5 ; Tip Si hay c\u00e1lculos a la derecha del operador =, se realizan antes de que el valor se asigne a la variable a la izquierda del operador. Note las variables pueden estar formadas por n\u00fameros, letras y $ o _, pero no pueden contener espacios ni empezar con un n\u00famero. Warning las variables son sensibles a May\u00fasculas y min\u00fasculas Estas son dos variables distintas: var myVar = \"lalala\" ; var MyVar = 5 ; Tip Por convenci\u00f3n las variables se escriben en camelCase tambi\u00e9n llamado lowerCamelCase Para m\u00e1s info sobre convenciones de nombre ver: Convenciones de nombres Estas son dos variables distintas: var unaVariable ; var otraVariable ; var ejemploDeNombrePropio ; Tipos de Variables JS \u00b6 var : variables globales sobre-escribibles en su declaraci\u00f3n let : variables de entorno (funci\u00f3n, bloque) no se sobreescriben en su declaraci\u00f3n const : constantes, solo se puede asignar valor una vez. Tip por convenci\u00f3n las variables que son constantes se escriben con el formato: SCREAMING_SNAKE_CASE Operadores Aritm\u00e9ticos \u00b6 Los operadores aritm\u00e9ticos son s\u00edmbolos que nos permiten realizar funciones aritm\u00e9ticas. Operadores B\u00e1sicos + Suma - Resta * Multiplicaci\u00f3n / Divisi\u00f3n % M\u00f3dulo (calcula el resto de una divisi\u00f3n) Ejemplos: const myVar = 5 + 10 ; // Suma const myVar = 12 - 6 ; // Resta const myVar = 13 * 13 ; // Multiplicaci\u00f3n const myVar = 16 / 2 ; // Divisi\u00f3n Incrementa - Decrementa ++ incrementa + 1 -- Decrementa -1 Ejemplos: i ++ ; // es equivalente a i = i + 1; i -- ; // es equivalente a i = i - 1; Asignaci\u00f3n Compuesta \u00b6","title":"JavaScript B\u00e1sico"},{"location":"coding_notes/javascript/01_javascript_basico/#javascript-basico","text":"","title":"JavaScript B\u00e1sico"},{"location":"coding_notes/javascript/01_javascript_basico/#comentarios","text":"Info Los comentarios son l\u00edneas de c\u00f3digo que el compilador omite. Son muy usados para documentar el c\u00f3digo y recordar que hace el mismo. Comentario de una linea // esto es un comentartio Comentario de multiples lineas /* Esto es un comentartio de multiples lineas */ Comentarios para documentaci\u00f3n Existe un tercer tipo de comentario que es para generar la documentaci\u00f3n del proyecto o c\u00f3digo que estemos creando. Cuidad al documentar Si bien la documentaci\u00f3n del proyecto es muy importante para que otros programadores entienda f\u00e1cilmente el c\u00f3digo escrito es importante recordad que el c\u00f3digo debe ser autoexplicativo evitando documentar innecesariamente. Ya que cuando actualicemos el c\u00f3digo tambi\u00e9n tenemos que actualizar la documentaci\u00f3n. \u00dasala sabiamente. Por lo general un comentario de documentacion lucera como el siguiente: /* /** * Represents a book. * @constructor * @param {string} title - The title of the book. * @param {string} author - The author of the book. */ function Book ( title , author ) { } * / Documentar un proyecto es todo un t\u00f3pico, aqu\u00ed hay algunos enlaces de inter\u00e9s: M\u00e1s Info sobre documentaci\u00f3n en JS https://jsdoc.app/ https://developer.wordpress.org/coding-standards/inline-documentation-standards/javascript/","title":"Comentarios"},{"location":"coding_notes/javascript/01_javascript_basico/#variables","text":"Tipo de datos undefined , null , boolean , string , symbol , bigint , number , y object declarar una variable y asignarle un valor: var myVar ; // undefined myVar = 5 ; Tip Si hay c\u00e1lculos a la derecha del operador =, se realizan antes de que el valor se asigne a la variable a la izquierda del operador. Note las variables pueden estar formadas por n\u00fameros, letras y $ o _, pero no pueden contener espacios ni empezar con un n\u00famero. Warning las variables son sensibles a May\u00fasculas y min\u00fasculas Estas son dos variables distintas: var myVar = \"lalala\" ; var MyVar = 5 ; Tip Por convenci\u00f3n las variables se escriben en camelCase tambi\u00e9n llamado lowerCamelCase Para m\u00e1s info sobre convenciones de nombre ver: Convenciones de nombres Estas son dos variables distintas: var unaVariable ; var otraVariable ; var ejemploDeNombrePropio ;","title":"Variables"},{"location":"coding_notes/javascript/01_javascript_basico/#tipos-de-variables-js","text":"var : variables globales sobre-escribibles en su declaraci\u00f3n let : variables de entorno (funci\u00f3n, bloque) no se sobreescriben en su declaraci\u00f3n const : constantes, solo se puede asignar valor una vez. Tip por convenci\u00f3n las variables que son constantes se escriben con el formato: SCREAMING_SNAKE_CASE","title":"Tipos de Variables JS"},{"location":"coding_notes/javascript/01_javascript_basico/#operadores-aritmeticos","text":"Los operadores aritm\u00e9ticos son s\u00edmbolos que nos permiten realizar funciones aritm\u00e9ticas. Operadores B\u00e1sicos + Suma - Resta * Multiplicaci\u00f3n / Divisi\u00f3n % M\u00f3dulo (calcula el resto de una divisi\u00f3n) Ejemplos: const myVar = 5 + 10 ; // Suma const myVar = 12 - 6 ; // Resta const myVar = 13 * 13 ; // Multiplicaci\u00f3n const myVar = 16 / 2 ; // Divisi\u00f3n Incrementa - Decrementa ++ incrementa + 1 -- Decrementa -1 Ejemplos: i ++ ; // es equivalente a i = i + 1; i -- ; // es equivalente a i = i - 1;","title":"Operadores Aritm\u00e9ticos"},{"location":"coding_notes/javascript/01_javascript_basico/#asignacion-compuesta","text":"","title":"Asignaci\u00f3n Compuesta"},{"location":"coding_notes/javascript/02_ES6/","text":"ES6 \u00b6 Declaraci\u00f3n de Variables ES6 \u00b6 Declarando con var var es declarada globalmente y localmente si es dentro de una funcion Sample var numArray = []; for ( var i = 0 ; i < 3 ; i ++ ) { numArray . push ( i ); } console . log ( numArray ); // [0, 1, 2] console . log ( i ); // 3 } Este comportamiento causar\u00e1 problemas si creas una funci\u00f3n y la almacenas para su uso posterior dentro de un bucle for que usa la variable i . Esto se debe a que la funci\u00f3n almacenada siempre se referir\u00e1 al valor de la variable global i actualizada. Declarando con let let ademas de lo anterior let tambi\u00e9n se limita al bloque, declaraci\u00f3n o expresi\u00f3n Sample let printNumTwo ; for ( let i = 0 ; i < 3 ; i ++ ) { if ( i === 2 ) { printNumTwo = function () { return i ; }; } } console . log ( printNumTwo ()); // 2 console . log ( i ); // i is not defined Declarando con const const ademas de funcionar como let , y de ser inmutable aun se puede modificar, si la variable declarada es un objeto (arrays, funciones). Sample const s = [ 5 , 6 , 7 ]; s = [ 1 , 2 , 3 ]; // no funcionara s [ 2 ] = 45 ; console . log ( s ); // [5, 6, 45] Arrow Functions \u00b6 Info Cuando la funci\u00f3n no posee cuerpo y s\u00f3lo tiene un valor de retorno, la sintaxis de \"funci\u00f3n de flecha\", te permite omitir la palabra clave return, as\u00ed como los corchetes que rodean el c\u00f3digo. Esto ayuda a simplificar las funciones m\u00e1s peque\u00f1as en sentencias de una sola l\u00ednea Sample const myFunc = () => new Date (); Tambi\u00e9n puede pasar argumentos a una arrow function Sample const doubler = ( item ) => item * 2 ; doubler ( 4 ); Si la funci\u00f3n recibe un solo argumento se puede omitir los () Sample const doubler = item => item * 2 ;","title":"ES6"},{"location":"coding_notes/javascript/02_ES6/#es6","text":"","title":"ES6"},{"location":"coding_notes/javascript/02_ES6/#declaracion-de-variables-es6","text":"Declarando con var var es declarada globalmente y localmente si es dentro de una funcion Sample var numArray = []; for ( var i = 0 ; i < 3 ; i ++ ) { numArray . push ( i ); } console . log ( numArray ); // [0, 1, 2] console . log ( i ); // 3 } Este comportamiento causar\u00e1 problemas si creas una funci\u00f3n y la almacenas para su uso posterior dentro de un bucle for que usa la variable i . Esto se debe a que la funci\u00f3n almacenada siempre se referir\u00e1 al valor de la variable global i actualizada. Declarando con let let ademas de lo anterior let tambi\u00e9n se limita al bloque, declaraci\u00f3n o expresi\u00f3n Sample let printNumTwo ; for ( let i = 0 ; i < 3 ; i ++ ) { if ( i === 2 ) { printNumTwo = function () { return i ; }; } } console . log ( printNumTwo ()); // 2 console . log ( i ); // i is not defined Declarando con const const ademas de funcionar como let , y de ser inmutable aun se puede modificar, si la variable declarada es un objeto (arrays, funciones). Sample const s = [ 5 , 6 , 7 ]; s = [ 1 , 2 , 3 ]; // no funcionara s [ 2 ] = 45 ; console . log ( s ); // [5, 6, 45]","title":"Declaraci\u00f3n de Variables ES6"},{"location":"coding_notes/javascript/02_ES6/#arrow-functions","text":"Info Cuando la funci\u00f3n no posee cuerpo y s\u00f3lo tiene un valor de retorno, la sintaxis de \"funci\u00f3n de flecha\", te permite omitir la palabra clave return, as\u00ed como los corchetes que rodean el c\u00f3digo. Esto ayuda a simplificar las funciones m\u00e1s peque\u00f1as en sentencias de una sola l\u00ednea Sample const myFunc = () => new Date (); Tambi\u00e9n puede pasar argumentos a una arrow function Sample const doubler = ( item ) => item * 2 ; doubler ( 4 ); Si la funci\u00f3n recibe un solo argumento se puede omitir los () Sample const doubler = item => item * 2 ;","title":"Arrow Functions"},{"location":"coding_notes/javascript/03_expresiones_regulares/","text":"Expresiones Regulares \u00b6","title":"Expresiones Regulares"},{"location":"coding_notes/javascript/03_expresiones_regulares/#expresiones-regulares","text":"","title":"Expresiones Regulares"},{"location":"coding_notes/javascript/04_depuracion/","text":"Depuraci\u00f3n \u00b6","title":"Depuraci\u00f3n"},{"location":"coding_notes/javascript/04_depuracion/#depuracion","text":"","title":"Depuraci\u00f3n"},{"location":"coding_notes/javascript/05_estructuras_de_datos_basicas/","text":"Estructuras de Datos B\u00e1sicas \u00b6","title":"Estructuras de Datos B\u00e1sicas"},{"location":"coding_notes/javascript/05_estructuras_de_datos_basicas/#estructuras-de-datos-basicas","text":"","title":"Estructuras de Datos B\u00e1sicas"},{"location":"coding_notes/javascript/06_programacion_de_algoritmos_basicos/","text":"Programaci\u00f3n de Algoritmos B\u00e1sicos \u00b6","title":"Programaci\u00f3n de Algoritmos B\u00e1sicos"},{"location":"coding_notes/javascript/06_programacion_de_algoritmos_basicos/#programacion-de-algoritmos-basicos","text":"","title":"Programaci\u00f3n de Algoritmos B\u00e1sicos"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/","text":"Programaci\u00f3n Orientada a Objetos \u00b6 Objects \u00b6 Objetos Los objetos en JS son usados para modelar objetos reales Usan Dot Notation tiene propiedades y metodos Sample let dog = { name : \"Poppy\" , numLegs : 4 }; Acceder a sus Propiedades \u00b6 Acceder a sus Propiedades Usa dot notation Sample dogName = dog . name ; console . log ( dogName ); // Poppy M\u00e9todos \u00b6 Info Los M\u00e9todos son funciones que agregan distintos comportamientos Sample let dog = { name : \"Poppy\" , numLegs : 4 , sayLegs : function (){ return \"This dog has \" + dog . numLegs + \" legs.\" ;} }; dog . sayLegs (); This Keyword \u00b6 Info Podemos usar this para hacer referencia al nombre del objeto y evitar errores, si el nombre del objeto cambia en el futuro. Esto nos permite tener un c\u00f3digo limpio y reusable. Sample let dog = { name : \"Poppy\" , numLegs : 4 , sayLegs : function (){ return \"This dog has \" + this . numLegs + \" legs.\" ;} }; dog . sayLegs (); Constructor \u00b6 Info Los Constructor son funciones para crear objetos Pensalos como el plano (Blueprint) de los objetos Sample function Dog () { this . name = \"Poppy\" ; this . color = \"red\" ; this . numLegs = 5 ; } Buenas Pr\u00e1cticas Los Constructors se definen con la primera letra de sus palabras en Mayusculas este formato se llama CamelCase . Los Constructors usan la keyword this para setear las propiedades del objeto que se creara. this hace referencia al nuevo objeto que se creara. Los Constructors definen propiedades y comportamientos en vez de devolver un valor como otras funciones. Crear un objeto con un Constructors \u00b6 Sample function Dog () { this . name = \"Poppy\" ; this . color = \"red\" ; this . numLegs = 4 ; } let perro = new Dog (); Warning Fijate que se usa la keyword new antes de la llamada al constructor This le dice a JS que cree una nueva instancia del objeto. De lo contrario da resultados inesperados, a lo JS. Note Como cualquier objeto sus propiedades pueden ser accedidas y modificadas. Constructors Parameters \u00b6 Info Los Parameters (parametros) sirven para inicializar las propiedades del constructor Sample function Dog ( name , color ) { this . name = name ; this . color = color ; this . numLegs = 4 ; } let caniche = new Dog ( \"Killer\" , \"white\" ); instanceof \u00b6","title":"Programaci\u00f3n Orientada a Objetos"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#programacion-orientada-a-objetos","text":"","title":"Programaci\u00f3n Orientada a Objetos"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#objects","text":"Objetos Los objetos en JS son usados para modelar objetos reales Usan Dot Notation tiene propiedades y metodos Sample let dog = { name : \"Poppy\" , numLegs : 4 };","title":"Objects"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#acceder-a-sus-propiedades","text":"Acceder a sus Propiedades Usa dot notation Sample dogName = dog . name ; console . log ( dogName ); // Poppy","title":"Acceder a sus Propiedades"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#metodos","text":"Info Los M\u00e9todos son funciones que agregan distintos comportamientos Sample let dog = { name : \"Poppy\" , numLegs : 4 , sayLegs : function (){ return \"This dog has \" + dog . numLegs + \" legs.\" ;} }; dog . sayLegs ();","title":"M\u00e9todos"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#this-keyword","text":"Info Podemos usar this para hacer referencia al nombre del objeto y evitar errores, si el nombre del objeto cambia en el futuro. Esto nos permite tener un c\u00f3digo limpio y reusable. Sample let dog = { name : \"Poppy\" , numLegs : 4 , sayLegs : function (){ return \"This dog has \" + this . numLegs + \" legs.\" ;} }; dog . sayLegs ();","title":"This Keyword"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#constructor","text":"Info Los Constructor son funciones para crear objetos Pensalos como el plano (Blueprint) de los objetos Sample function Dog () { this . name = \"Poppy\" ; this . color = \"red\" ; this . numLegs = 5 ; } Buenas Pr\u00e1cticas Los Constructors se definen con la primera letra de sus palabras en Mayusculas este formato se llama CamelCase . Los Constructors usan la keyword this para setear las propiedades del objeto que se creara. this hace referencia al nuevo objeto que se creara. Los Constructors definen propiedades y comportamientos en vez de devolver un valor como otras funciones.","title":"Constructor"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#crear-un-objeto-con-un-constructors","text":"Sample function Dog () { this . name = \"Poppy\" ; this . color = \"red\" ; this . numLegs = 4 ; } let perro = new Dog (); Warning Fijate que se usa la keyword new antes de la llamada al constructor This le dice a JS que cree una nueva instancia del objeto. De lo contrario da resultados inesperados, a lo JS. Note Como cualquier objeto sus propiedades pueden ser accedidas y modificadas.","title":"Crear un objeto con un Constructors"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#constructors-parameters","text":"Info Los Parameters (parametros) sirven para inicializar las propiedades del constructor Sample function Dog ( name , color ) { this . name = name ; this . color = color ; this . numLegs = 4 ; } let caniche = new Dog ( \"Killer\" , \"white\" );","title":"Constructors Parameters"},{"location":"coding_notes/javascript/07_programacion_orientada_a_objetos/#instanceof","text":"","title":"instanceof"},{"location":"coding_notes/javascript/08_programacion_funcional/","text":"Programaci\u00f3n Funcional \u00b6","title":"Programaci\u00f3n Funcional"},{"location":"coding_notes/javascript/08_programacion_funcional/#programacion-funcional","text":"","title":"Programaci\u00f3n Funcional"},{"location":"coding_notes/javascript/09_programacion_de_algoritmos_intermedios/","text":"Programaci\u00f3n de Algoritmos Intermedios \u00b6","title":"Programaci\u00f3n de Algoritmos Intermedios"},{"location":"coding_notes/javascript/09_programacion_de_algoritmos_intermedios/#programacion-de-algoritmos-intermedios","text":"","title":"Programaci\u00f3n de Algoritmos Intermedios"},{"location":"coding_notes/solidity/","text":"Solidity Notes \u00b6 El Lenguaje Solidity \u00b6 Solidity es un lenguaje de alto nivel orientado a contratos. Su sintaxis es similar a la de JavaScript y est\u00e1 enfocado espec\u00edficamente a la M\u00e1quina Virtual de Etehreum (EVM). Solidity est\u00e1 tipado de manera fuerte y acepta, entre otras cosas, herencias, librer\u00edas y tipos complejos definidos por el usuario. Lecturas Recomendadas https://github.com/ethereum/solidity https://ethereum.org/en/developers/docs/evm/ https://blockgeeks.com/guides/smart-contracts/ Contratos \u00b6 El c\u00f3digo Solidity est\u00e1 encapsulado en contratos. Un contrato es el bloque de construcci\u00f3n m\u00e1s b\u00e1sico de las aplicaciones de Ethereum. Estructura de un Contrato // agregar una licencia para producci\u00f3n. // SPDX-License-Identifier: GPL-3.0 // Version puede representar un rango. Ej >=0.7.0 <9.0.0 // o una version en particular ^5.0.0 pragma solidity >= 0.7.0 < 0.9.0 ; // Declaraci\u00f3n de un contrato, similar a una clase contract <Estructura> contract Estructura { // Funci\u00f3n de inicializaci\u00f3n de un contrato constructor () { // C\u00f3digo de inicializaci\u00f3n } } Cite Layout of a Solidity Source File \u2014 Solidity 0.5.8 documentation https://docs.soliditylang.org/en/v0.5.8/layout-of-source-files.html Remix - Ethereum IDE https://remix.ethereum.org/ Variables y Tipos de Datos \u00b6 Tipos de datos int | uint <8-256> : Son n\u00fameros enteros, que pueden ser sin signo ( uint ) o con signo ( int ), y que pueden tener una capacidad de 8 int8 a 256 bits. bool : Verdadero o flaso address : Guarda direcciones de ETH de 160 bits (20 bytes), y puede tener m\u00e9todos extra como .transfer o .balance string : Cadena de texto bytes<8-256> : Cadena de bytes Tipos de variables locales : Son aquellas que ocurren durante la ejecuci\u00f3n en la EVM es la parte correspondiente a memoria vol\u00e1til estado : Son variables que se almacenan en la parte de la ROM de la EVM. Es memoria persistente, esto significa que se escriben en la cadena de bloques (blockchain) Variables globales msg : Toda transacci\u00f3n es un mensaje firmado. En este objeto vienen los datos de dicho mensaje (sender, value, etc.) tx : Represena la transacci\u00f3n, es distitna respecto a msg porque cosas como el sender van variando conforme se concatenan llamadas entre contratos block : Informaci\u00f3n respecto al bloque Ejemplo // SPDX-License-Identifier: GPL-3.0 pragma solidity >= 0.7.0 < 0.9.0 ; contract Estructura { int cantidad ; uint cantidadSinSigno ; address direccion ; bool firmado ; constructor ( bool estaFirmado ) { direccion = msg.sender ; firmado = estaFirmado ; } } Lecturas Recomendadas https://solidity-es.readthedocs.io/es/latest/types.html Operaciones Matem\u00e1ticas \u00b6 Suma : x + y Resta : x - y Multiplicaci\u00f3n : x * y Divisi\u00f3n : x / y M\u00f3dulo : x % y (por ejemplo, 13 % 5 es 3, ya que al dividir 13 entre 5, 3 es el resto) Exponencial : x**y \"x elevado a y\" Estructuras de datos \u00b6 Structs \u00b6 Structs Son estructuras de datos complejas, que agrupan una serie de datos. Ejemplo struct Person { uint age ; string name ; } Arrays \u00b6 Arrays Hay dos tipos de arrays en Solidity: arrays fijos y arrays din\u00e1micos: Ejemplo // Un Array con una longitud fija de 2 elementos: uint [ 2 ] fixedArray ; // otro Array fijo, con longitud de 5 elementos: string [ 5 ] stringArray ; // un Array din\u00e1mico, sin longitud fija que puede seguir creciendo: uint [] dynamicArray ; Tambi\u00e9n puedes crear arrays de estructuras. Ejemplo Person [] people ; // Array din\u00e1mico, podemos seguir a\u00f1adi\u00e9ndole elementos Puedes declarar un array como p\u00fablico, y Solidity crear\u00e1 automaticamente una funci\u00f3n getter para acceder a \u00e9l. La sintaxis es as\u00ed: Ejemplo Person [] public people ; Lecturas Recomendadas https://solidity-es.readthedocs.io/es/latest/types.html#tipos-de-referencia Trabajando con Arrays y Structs \u00b6 Ejemplo // crear un nuevo Objeto `Person` del struct creado anteriormente Person satoshi = Person ( 172 , \"Satoshi\" ); // a\u00f1adir esta persona a nuestro array people . push ( satoshi ); version de una linea Ejemplo people . push ( Person ( 16 , \"Vitalik\" )); Maps \u00b6 Los mapas son estructuras de datos de tipo llave-valor, que permiten apuntar un tipo de dato a otro en forma de diccionario. El tipo de la llave puede ser cualquier tipo de dato elemental, (por ejemplo, uint), y el tipo de dato del valor puede ser cualquier dato elemental o complejo, (se pueden inclusive hacer estructuras multidimensionales) mapping(<key type> => <value type>) <visibility> <name>; Enum \u00b6 Representa una lista de valores posibles creados por el usuario, una variable del tipo de enum declarado s\u00f3lo puede tomar los valores enumerados. enum { <value1>, ..., <valueN> } Lecturas Recomendadas https://platzi.com/clases/2561-smart-contracts/42824-arrays-y-mappings/ https://solidity-es.readthedocs.io/es/latest/types.html#mappings Esturcturas de Control \u00b6 if/else : Estructura condicional. Ejecuta un bloque u otro dependiendo de una evaluaci\u00f3n booleana for : Estructura c\u00edclica que ejecuta un bloque de instrucciones un n\u00famero determinado de veces while : Estructura c\u00edclica que repite un bloque mientras se cumpla una condici\u00f3n do while : Estructura c\u00edclica que se asmilia al while, con la diferencia que siempre se ejecuta almenos una vez Eventos \u00b6 Los eventos son un tipo de dato que sirve para emitir avisos de que ocurri\u00f3 alguna acci\u00f3n en particular. Puede ser utilizado por clientes para escuchar cambios importantes, y tambi\u00e9n pueden utilizarse para indexar informaci\u00f3n. Protocolos como TheGraph utilizan indexaci\u00f3n de eventos para agregaci\u00f3n de informaci\u00f3n Lecturas Recomendadas https://platzi.com/clases/2561-smart-contracts/42820-eventos/ Funciones \u00b6 Son piezas de c\u00f3digo definidas por un nombre, par\u00e1metros y modificadores. Estructura name : Nombre de la funci\u00f3n type : Tipo de dato parameter : Nombre del par\u00e1metro () access modifier : public, private, internal, external mutability modifier : view, pure. Ambas hacen que la funci\u00f3n no cobre gas, y si se omite, se asume que es una funci\u00f3n que escribe en el storage de la EVM user defined modifiers : Son modificadores definidos por el usuario, son opcionales y se presentan en la siguiente clase returns : Indica que la funci\u00f3n retornar\u00e1 uno o m\u00e1s datos function <name>(<type> <parameter>, <type> <parameter>[..., ]>) <access modifiers> <mutability modifiers> <user defined modifiers> <returns>(<type>) { <content> } Ejemplo function eatHamburgers ( string _name , uint _amount ) { } Tip La convenci\u00f3n (no obligatoria) es llamar los par\u00e1metros de las funciones con nombres que empiezan con un guion bajo (_) para de esta forma diferenciarlos de variables globales. Se recomienda usar esta convenci\u00f3n. Access modifier public : son accesibles desde todo \u00e1mbito posible. private : solo son accesibles desde el mismo contrato. internal : solo son accesibles desde el mismo contrato y sus contratos derivados. external : solo accesibles desde fuera del contrato. mutability modifier view : funciones para leer datos del contracto. Por ejemplo para acceder a una variable privada y retornarla. Pure : funciones que no modifican datos del contrato pero devuelven algo realizazdo con esos datos por ejemplo una suma. Algunos puntos a pulir: Las funciones pure. No leen ni modifican variables de estado y tampoco usan ninguna variable global. Existen funciones payable. Estas se usan cuando la funci\u00f3n env\u00eda ether a alguna direcci\u00f3n en la blockchain. Solo las funciones con tipo de retorno \u201cpayable\u201d est\u00e1n habilitadas para enviar ether. Convenciones no obligatorias En el desarrollo Solidity existe una convenci\u00f3n no obligatoria y es que todos los par\u00e1metros de una funci\u00f3n empiecen con gui\u00f3n bajo. Modificadores \u00b6 Los modificadores son funciones especiales creadas por el usuario y que se a\u00f1aden a otra funci\u00f3n para envolver su funcionamiento. Algo parecido a un midlewere Permiten ejecutar codigo al inicio de una funcion y por lo general estan ligados a la restriccion de permisos para que solo el owner, quien hizo el deploy tenga acceso. modifier <name>(<type> <parameter>..., [,...]) { <content> } El gui\u00f3n bajo El gui\u00f3n bajo (tambi\u00e9n conocido como placeholder), es una instrucci\u00f3n especial del modificador que indica d\u00f3nde se va a ejecutar el c\u00f3digo de la funci\u00f3n inicial que envuelve al modifier. Por ejemplo: ## Primero valida y luego ejecuta modifier isOwner() { if(<condicion>) revert() _; } ## Primero ejecuta y luego valida modifier isOwner() { _; if(<condicion>) revert() } ## Ejecuta, valida y vuelve a ejecutar modifier isOwner() { _; if(<condicion>) revert() _; } La funci\u00f3n revert() se utiliza para arrojar una excepci\u00f3n en nuestro smart contract y revertir la funci\u00f3n que la llama. Se puede agregar un mensaje como par\u00e1metro describiendo el error. modifier EsOwner() { if (msg.sender != owner) revert(\"Solo el due\u00f1o del contrato puede modificarlo.\"); _; } Dentro de un modificador de funci\u00f3n se puede a\u00f1adir toda la l\u00f3gica que necesitemos, no se limita a una sola validaci\u00f3n, se pueden usar estructuras require dentro de las mismas: require( msg.sender == owner, \"Solo el propietario puede cambiar el nombre del proyecto.\" ); Y de este modo a\u00f1adir m\u00e1s validaciones o mecanismos de validaci\u00f3n diferentes, podemos ver al modificador como una funci\u00f3n que permite la ejecuci\u00f3n de otra funci\u00f3n siempre y cuando todas sus validaciones sean superadas. Errores \u00b6 Manejo de errores assert : Se utiliza para pruebas, compara dos valores. revert : Es un error que regresa todas las modificaciones de estado realizadas durante la ejecuci\u00f3n de la funci\u00f3n. Recibe por par\u00e1metro un mensaje de error. require : Es una variaci\u00f3n del revert que recibe por par\u00e1metro una expresi\u00f3n booleana y revierte si esta expresi\u00f3n es falsa. Cabe destacar que cualquier consumo de gas ejecutado hasta el momento de un revert se debe pagar, porque el c\u00f3mputo fu\u00e9 utilizado Ejemplos usando If modifier IsOwner () { if ( msg.sender != owner ) revert (); _ ; } Usando require() modifier IsOwner() { require(msg.sender == owner, \"El usuario no es el creador del contrato\"); _; } Lecturas Recomendadas https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e#:~:text=which%20is%20appropriate.-,Use%20require()to%3A,-Validate%20user%20inputs Tipos de Almacenamiento \u00b6 Tipos de almacenamiento Storage : Memoria persistente. Es el m\u00e1s costoso. Similar a la memoria ROM Memory : Variables temporales durante ejecuci\u00f3n. Se asimila a la RAM Calldata : Son constantes definidas en el entorno de ejecuci\u00f3n de una variable. No son modificables. Memoria din\u00e1mica La raz\u00f3n por la que un string necesita un sufijo que indique el uso de memoria, es debido a que es memoria din\u00e1mica, por lo que calldata no puede alocar una cantidad definida de memoria, por lo que tenemos que indicarle que esa variable la pase por la memoria vol\u00e1til (RAM/memory), para que la funci\u00f3n la pueda manejar correctamente. Este efecto ocurre con cualquier cosa que sea de tama\u00f1o no definido, por ejemplo: Un arreglo Un string Storage: Hace referencia a todos los datos guardados permanentemente en la blockchain. \u00bfPero cu\u00e1les son estos datos? Las variables de nuestro contrato que hayan sido declaradas en el scope global fuera de cualquier m\u00e9todo (funci\u00f3n del contrato), a esto se le denomina el ESTADO de nuestro Smart Contract. Puedes entenderlo como los datos del disco duro de tu ordenador, solo que est\u00e1n en la blockchain, esto es, descentralizados en millones de discos duros u otros dispositivos de almacenamiento persistente (nodos). Gas y Comisiones \u00b6 Gas y comisiones El gas es una unidad de medida para el procesamiento de la EVM. Se mide en unidades de gas, y es constante para las mismas operaciones. gasPrice : Es la cantidad de ETH que pagamos por unidad de gas. Es decir, aunque el gas sea constante, la demanda por ese gas puede subir el precio. gasCost : Es la cantidad de unidades de gas que gener\u00f3 la ejecuci\u00f3n gasFee : Gas cost * Gas Price Priority fee A partir del EIP1559 , se realizaron cambios importantes al mercado de gas, y se contempla el priority fee, que es el extra que menciona Sebasti\u00e1n, y es una propina para el minero con la cu\u00e1l se obtiene prioridad en la ejecuci\u00f3n. Lecturas Recomendadas https://ethgasstation.info/ https://ethereumprice.org/gas/ Transferencias de ether desde un contrato \u00b6 send : Env\u00eda un monto a una direcci\u00f3n y retorna false si la transferencia no se realiza transfer : Env\u00eda un monto y revierte si no se puede realizar call : Esta es m\u00e1s complicada, pero b\u00e1sicamente realiza una llamada hacia una direcci\u00f3n. Incluso se pueden llamar funciones de otro contrato si se le pasa un address v\u00e1lido y la llamada dentro del par\u00e1metro data. No obstante, al ser un mensaje, puede llevar ether, y por eso se usa para env\u00edos. Retorna el resultado de la funci\u00f3n llamada (si es que fu\u00e9 el caso). Un wei es la unidad m\u00e1s peque\u00f1a de Ether. 1 ETH == 10^18 WEI == 1,000,000,000,000,000,000 WEI Recibir ether desde un contrato \u00b6 Receive : Recibe el saldo de trasferencias sin par\u00e1metros. FallBack : Recibe informaci\u00f3n adjunta a la trasferencia por medio de los par\u00e1metros. Payable : Se especifica el tipo payable a una funci\u00f3n que puede recibir trasferencias. Lecturas Recomendadas Sin lectura Recomendada Capitulo 16: Manejo de dependencias y librer\u00edas \u00b6 Lecturas Recomendadas https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol Herencias \u00b6 \u201cNo hay que reinvetar la rueda\u201d Utilizamos la Herencia para reutilizar codigo en nuevos contratos. is . Si un contrato tiene un constructor con parametros, debemos indicar que valores debe tomar ese constructor para poder derivarse. Entonces, se busca generar una relacion entre contratos para reutilizar el codigo mediante la Herencia. Por lo que la capacidad de agregar/modificar una funcion ya escrita en el contrato anterior nos sera de mucha utilidad. virtual : se utiliza para identificar un contrato que puede ser heredado. override : para sobreescrivir una funcion de un contrato heredado se usa la palabra. contacto abstracto es lo mismo que una clase abstracta. Las interfaces no van a tener codigo. su funcion es indicarnos un comportamiento que queremos que tenga un contrato. Solo tiene declaraciones (definiciones de funciones) sin codigo. super (sentencia) nos sirve para hacer referencia a una funcion de clase superior. Ejemplo practico: Buscamos 2 funciones virtuales en Modificadores\ud83d\udcd7 e Interface\ud83d\udcd8 para colocar en nuestro archivo/contrato de Herencia \ud83d\udcd5\ud83d\udcd8\ud83d\udcd7. Vamos a tener que importar el directorio de los demas contratos, en este caso se encuentran en la misma carpeta los contratos. Coloco los emojis de libros para hacer referencia a un contrato, si hay varios libros es porque es una Herencia que contiene otros contratos. Herencia.sol \ud83d\udcd5\ud83d\udcd8\ud83d\udcd7 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.7.0 < 0.9.0; import \"./Interface.sol\"; import \"./Modificadores.sol\"; contract Herencia is Suma, Modificadores { constructor(string memory nombreNuevo) Modificadores(nombreNuevo) { } function sumar(uint numero1, uint numero2) public override EsOwner() view returns(uint) { return numero1 + numero2; } } Es buena practica traer todo el encabezado de la funcion de \u201cInterface\u201d, por lo que es recomendable copiar y pegar \u201cfunction sumar(uint numero1, uint numero2)\u201d Interface.sol \ud83d\udcd8 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.7.0 < 0.9.0; interface Suma { function sumar(uint numero1, uint numero2) external returns (uint); } Modificadores.sol \ud83d\udcd7 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.4.0 < 0.9.0; contract Modificadores { address private owner; string private nombreOwner; constructor(string memory nombre { owner = msg.sender; nombreOwner = nombre; } function Suma(uint numero1, uint numero2) public view EsOwner() returns (uint) { return numero1 + numero2; } modifier EsOwner() { if (msg.sender != owner) revert(); _; } } Polimorfismo \u00b6 Capacidad de poder utilizar contratos deployados y sus contratos superiores o funciones de los mismos en nuestro contrato. Polimorfismo es una propiedad de la POO que permite (a nivel general digamos) enviar mensajes iguales a objetos de diferentes tipos. En limpio: tus objetos deben de \u201csaber\u201d responder al mensaje que les est\u00e1s enviando, esta es la propiedad polim\u00f3rfica. No tiene nada qu\u00e9 ver con contratos ni nada por el estilo, es puramente un tema de objetos Tokens \u00b6 \u200dUn token es un objeto f\u00edsico o digital que tiene valor en cierto contexto o para determinada comunidad, aunque su propia materialidad no contenga ese valor en s\u00ed. Las fichas de casino, por ejemplo, son solo pedazos de pl\u00e1stico de distintos colores, pero representan cantidades de dinero. Algunas, hasta millones de d\u00f3lares, aunque fabricar una de ellas cueste apenas centavos. Eso hacen los tokens: representan otra cosa, est\u00e1n en su lugar. \u00bfPor qu\u00e9? Hay muchos motivos: la comodidad, la seguridad, la facilidad de transportarlos o transferirlos. En el mundo cripto, los tokens se generan a partir de piezas de c\u00f3digo de programaci\u00f3n, en formato de contratos inteligentes que corren sobre la blockchain. El smart contract describe c\u00f3mo funciona cada token. La base de datos lleva el registro de cu\u00e1ntos tiene cada quien. Y los usuarios pueden envi\u00e1rselos entre s\u00ed como forma de transferirse valor. Lecturas Recomendadas Estandares Tokens no Fungibles: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol Estandares Tokens Fungibles: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol Application Binary Interface (ABI) \u00b6 Lecturas Recomendadas https://docs.ethers.io/v5/api/utils/abi/ https://web3js.readthedocs.io/en/v1.2.11/web3-eth-abi.html#eth-abi","title":"Solidity Notes"},{"location":"coding_notes/solidity/#solidity-notes","text":"","title":"Solidity Notes"},{"location":"coding_notes/solidity/#el-lenguaje-solidity","text":"Solidity es un lenguaje de alto nivel orientado a contratos. Su sintaxis es similar a la de JavaScript y est\u00e1 enfocado espec\u00edficamente a la M\u00e1quina Virtual de Etehreum (EVM). Solidity est\u00e1 tipado de manera fuerte y acepta, entre otras cosas, herencias, librer\u00edas y tipos complejos definidos por el usuario. Lecturas Recomendadas https://github.com/ethereum/solidity https://ethereum.org/en/developers/docs/evm/ https://blockgeeks.com/guides/smart-contracts/","title":"El Lenguaje Solidity"},{"location":"coding_notes/solidity/#contratos","text":"El c\u00f3digo Solidity est\u00e1 encapsulado en contratos. Un contrato es el bloque de construcci\u00f3n m\u00e1s b\u00e1sico de las aplicaciones de Ethereum. Estructura de un Contrato // agregar una licencia para producci\u00f3n. // SPDX-License-Identifier: GPL-3.0 // Version puede representar un rango. Ej >=0.7.0 <9.0.0 // o una version en particular ^5.0.0 pragma solidity >= 0.7.0 < 0.9.0 ; // Declaraci\u00f3n de un contrato, similar a una clase contract <Estructura> contract Estructura { // Funci\u00f3n de inicializaci\u00f3n de un contrato constructor () { // C\u00f3digo de inicializaci\u00f3n } } Cite Layout of a Solidity Source File \u2014 Solidity 0.5.8 documentation https://docs.soliditylang.org/en/v0.5.8/layout-of-source-files.html Remix - Ethereum IDE https://remix.ethereum.org/","title":"Contratos"},{"location":"coding_notes/solidity/#variables-y-tipos-de-datos","text":"Tipos de datos int | uint <8-256> : Son n\u00fameros enteros, que pueden ser sin signo ( uint ) o con signo ( int ), y que pueden tener una capacidad de 8 int8 a 256 bits. bool : Verdadero o flaso address : Guarda direcciones de ETH de 160 bits (20 bytes), y puede tener m\u00e9todos extra como .transfer o .balance string : Cadena de texto bytes<8-256> : Cadena de bytes Tipos de variables locales : Son aquellas que ocurren durante la ejecuci\u00f3n en la EVM es la parte correspondiente a memoria vol\u00e1til estado : Son variables que se almacenan en la parte de la ROM de la EVM. Es memoria persistente, esto significa que se escriben en la cadena de bloques (blockchain) Variables globales msg : Toda transacci\u00f3n es un mensaje firmado. En este objeto vienen los datos de dicho mensaje (sender, value, etc.) tx : Represena la transacci\u00f3n, es distitna respecto a msg porque cosas como el sender van variando conforme se concatenan llamadas entre contratos block : Informaci\u00f3n respecto al bloque Ejemplo // SPDX-License-Identifier: GPL-3.0 pragma solidity >= 0.7.0 < 0.9.0 ; contract Estructura { int cantidad ; uint cantidadSinSigno ; address direccion ; bool firmado ; constructor ( bool estaFirmado ) { direccion = msg.sender ; firmado = estaFirmado ; } } Lecturas Recomendadas https://solidity-es.readthedocs.io/es/latest/types.html","title":"Variables y Tipos de Datos"},{"location":"coding_notes/solidity/#operaciones-matematicas","text":"Suma : x + y Resta : x - y Multiplicaci\u00f3n : x * y Divisi\u00f3n : x / y M\u00f3dulo : x % y (por ejemplo, 13 % 5 es 3, ya que al dividir 13 entre 5, 3 es el resto) Exponencial : x**y \"x elevado a y\"","title":"Operaciones Matem\u00e1ticas"},{"location":"coding_notes/solidity/#estructuras-de-datos","text":"","title":"Estructuras de datos"},{"location":"coding_notes/solidity/#structs","text":"Structs Son estructuras de datos complejas, que agrupan una serie de datos. Ejemplo struct Person { uint age ; string name ; }","title":"Structs"},{"location":"coding_notes/solidity/#arrays","text":"Arrays Hay dos tipos de arrays en Solidity: arrays fijos y arrays din\u00e1micos: Ejemplo // Un Array con una longitud fija de 2 elementos: uint [ 2 ] fixedArray ; // otro Array fijo, con longitud de 5 elementos: string [ 5 ] stringArray ; // un Array din\u00e1mico, sin longitud fija que puede seguir creciendo: uint [] dynamicArray ; Tambi\u00e9n puedes crear arrays de estructuras. Ejemplo Person [] people ; // Array din\u00e1mico, podemos seguir a\u00f1adi\u00e9ndole elementos Puedes declarar un array como p\u00fablico, y Solidity crear\u00e1 automaticamente una funci\u00f3n getter para acceder a \u00e9l. La sintaxis es as\u00ed: Ejemplo Person [] public people ; Lecturas Recomendadas https://solidity-es.readthedocs.io/es/latest/types.html#tipos-de-referencia","title":"Arrays"},{"location":"coding_notes/solidity/#trabajando-con-arrays-y-structs","text":"Ejemplo // crear un nuevo Objeto `Person` del struct creado anteriormente Person satoshi = Person ( 172 , \"Satoshi\" ); // a\u00f1adir esta persona a nuestro array people . push ( satoshi ); version de una linea Ejemplo people . push ( Person ( 16 , \"Vitalik\" ));","title":"Trabajando con Arrays y Structs"},{"location":"coding_notes/solidity/#maps","text":"Los mapas son estructuras de datos de tipo llave-valor, que permiten apuntar un tipo de dato a otro en forma de diccionario. El tipo de la llave puede ser cualquier tipo de dato elemental, (por ejemplo, uint), y el tipo de dato del valor puede ser cualquier dato elemental o complejo, (se pueden inclusive hacer estructuras multidimensionales) mapping(<key type> => <value type>) <visibility> <name>;","title":"Maps"},{"location":"coding_notes/solidity/#enum","text":"Representa una lista de valores posibles creados por el usuario, una variable del tipo de enum declarado s\u00f3lo puede tomar los valores enumerados. enum { <value1>, ..., <valueN> } Lecturas Recomendadas https://platzi.com/clases/2561-smart-contracts/42824-arrays-y-mappings/ https://solidity-es.readthedocs.io/es/latest/types.html#mappings","title":"Enum"},{"location":"coding_notes/solidity/#esturcturas-de-control","text":"if/else : Estructura condicional. Ejecuta un bloque u otro dependiendo de una evaluaci\u00f3n booleana for : Estructura c\u00edclica que ejecuta un bloque de instrucciones un n\u00famero determinado de veces while : Estructura c\u00edclica que repite un bloque mientras se cumpla una condici\u00f3n do while : Estructura c\u00edclica que se asmilia al while, con la diferencia que siempre se ejecuta almenos una vez","title":"Esturcturas de Control"},{"location":"coding_notes/solidity/#eventos","text":"Los eventos son un tipo de dato que sirve para emitir avisos de que ocurri\u00f3 alguna acci\u00f3n en particular. Puede ser utilizado por clientes para escuchar cambios importantes, y tambi\u00e9n pueden utilizarse para indexar informaci\u00f3n. Protocolos como TheGraph utilizan indexaci\u00f3n de eventos para agregaci\u00f3n de informaci\u00f3n Lecturas Recomendadas https://platzi.com/clases/2561-smart-contracts/42820-eventos/","title":"Eventos"},{"location":"coding_notes/solidity/#funciones","text":"Son piezas de c\u00f3digo definidas por un nombre, par\u00e1metros y modificadores. Estructura name : Nombre de la funci\u00f3n type : Tipo de dato parameter : Nombre del par\u00e1metro () access modifier : public, private, internal, external mutability modifier : view, pure. Ambas hacen que la funci\u00f3n no cobre gas, y si se omite, se asume que es una funci\u00f3n que escribe en el storage de la EVM user defined modifiers : Son modificadores definidos por el usuario, son opcionales y se presentan en la siguiente clase returns : Indica que la funci\u00f3n retornar\u00e1 uno o m\u00e1s datos function <name>(<type> <parameter>, <type> <parameter>[..., ]>) <access modifiers> <mutability modifiers> <user defined modifiers> <returns>(<type>) { <content> } Ejemplo function eatHamburgers ( string _name , uint _amount ) { } Tip La convenci\u00f3n (no obligatoria) es llamar los par\u00e1metros de las funciones con nombres que empiezan con un guion bajo (_) para de esta forma diferenciarlos de variables globales. Se recomienda usar esta convenci\u00f3n. Access modifier public : son accesibles desde todo \u00e1mbito posible. private : solo son accesibles desde el mismo contrato. internal : solo son accesibles desde el mismo contrato y sus contratos derivados. external : solo accesibles desde fuera del contrato. mutability modifier view : funciones para leer datos del contracto. Por ejemplo para acceder a una variable privada y retornarla. Pure : funciones que no modifican datos del contrato pero devuelven algo realizazdo con esos datos por ejemplo una suma. Algunos puntos a pulir: Las funciones pure. No leen ni modifican variables de estado y tampoco usan ninguna variable global. Existen funciones payable. Estas se usan cuando la funci\u00f3n env\u00eda ether a alguna direcci\u00f3n en la blockchain. Solo las funciones con tipo de retorno \u201cpayable\u201d est\u00e1n habilitadas para enviar ether. Convenciones no obligatorias En el desarrollo Solidity existe una convenci\u00f3n no obligatoria y es que todos los par\u00e1metros de una funci\u00f3n empiecen con gui\u00f3n bajo.","title":"Funciones"},{"location":"coding_notes/solidity/#modificadores","text":"Los modificadores son funciones especiales creadas por el usuario y que se a\u00f1aden a otra funci\u00f3n para envolver su funcionamiento. Algo parecido a un midlewere Permiten ejecutar codigo al inicio de una funcion y por lo general estan ligados a la restriccion de permisos para que solo el owner, quien hizo el deploy tenga acceso. modifier <name>(<type> <parameter>..., [,...]) { <content> } El gui\u00f3n bajo El gui\u00f3n bajo (tambi\u00e9n conocido como placeholder), es una instrucci\u00f3n especial del modificador que indica d\u00f3nde se va a ejecutar el c\u00f3digo de la funci\u00f3n inicial que envuelve al modifier. Por ejemplo: ## Primero valida y luego ejecuta modifier isOwner() { if(<condicion>) revert() _; } ## Primero ejecuta y luego valida modifier isOwner() { _; if(<condicion>) revert() } ## Ejecuta, valida y vuelve a ejecutar modifier isOwner() { _; if(<condicion>) revert() _; } La funci\u00f3n revert() se utiliza para arrojar una excepci\u00f3n en nuestro smart contract y revertir la funci\u00f3n que la llama. Se puede agregar un mensaje como par\u00e1metro describiendo el error. modifier EsOwner() { if (msg.sender != owner) revert(\"Solo el due\u00f1o del contrato puede modificarlo.\"); _; } Dentro de un modificador de funci\u00f3n se puede a\u00f1adir toda la l\u00f3gica que necesitemos, no se limita a una sola validaci\u00f3n, se pueden usar estructuras require dentro de las mismas: require( msg.sender == owner, \"Solo el propietario puede cambiar el nombre del proyecto.\" ); Y de este modo a\u00f1adir m\u00e1s validaciones o mecanismos de validaci\u00f3n diferentes, podemos ver al modificador como una funci\u00f3n que permite la ejecuci\u00f3n de otra funci\u00f3n siempre y cuando todas sus validaciones sean superadas.","title":"Modificadores"},{"location":"coding_notes/solidity/#errores","text":"Manejo de errores assert : Se utiliza para pruebas, compara dos valores. revert : Es un error que regresa todas las modificaciones de estado realizadas durante la ejecuci\u00f3n de la funci\u00f3n. Recibe por par\u00e1metro un mensaje de error. require : Es una variaci\u00f3n del revert que recibe por par\u00e1metro una expresi\u00f3n booleana y revierte si esta expresi\u00f3n es falsa. Cabe destacar que cualquier consumo de gas ejecutado hasta el momento de un revert se debe pagar, porque el c\u00f3mputo fu\u00e9 utilizado Ejemplos usando If modifier IsOwner () { if ( msg.sender != owner ) revert (); _ ; } Usando require() modifier IsOwner() { require(msg.sender == owner, \"El usuario no es el creador del contrato\"); _; } Lecturas Recomendadas https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e#:~:text=which%20is%20appropriate.-,Use%20require()to%3A,-Validate%20user%20inputs","title":"Errores"},{"location":"coding_notes/solidity/#tipos-de-almacenamiento","text":"Tipos de almacenamiento Storage : Memoria persistente. Es el m\u00e1s costoso. Similar a la memoria ROM Memory : Variables temporales durante ejecuci\u00f3n. Se asimila a la RAM Calldata : Son constantes definidas en el entorno de ejecuci\u00f3n de una variable. No son modificables. Memoria din\u00e1mica La raz\u00f3n por la que un string necesita un sufijo que indique el uso de memoria, es debido a que es memoria din\u00e1mica, por lo que calldata no puede alocar una cantidad definida de memoria, por lo que tenemos que indicarle que esa variable la pase por la memoria vol\u00e1til (RAM/memory), para que la funci\u00f3n la pueda manejar correctamente. Este efecto ocurre con cualquier cosa que sea de tama\u00f1o no definido, por ejemplo: Un arreglo Un string Storage: Hace referencia a todos los datos guardados permanentemente en la blockchain. \u00bfPero cu\u00e1les son estos datos? Las variables de nuestro contrato que hayan sido declaradas en el scope global fuera de cualquier m\u00e9todo (funci\u00f3n del contrato), a esto se le denomina el ESTADO de nuestro Smart Contract. Puedes entenderlo como los datos del disco duro de tu ordenador, solo que est\u00e1n en la blockchain, esto es, descentralizados en millones de discos duros u otros dispositivos de almacenamiento persistente (nodos).","title":"Tipos de Almacenamiento"},{"location":"coding_notes/solidity/#gas-y-comisiones","text":"Gas y comisiones El gas es una unidad de medida para el procesamiento de la EVM. Se mide en unidades de gas, y es constante para las mismas operaciones. gasPrice : Es la cantidad de ETH que pagamos por unidad de gas. Es decir, aunque el gas sea constante, la demanda por ese gas puede subir el precio. gasCost : Es la cantidad de unidades de gas que gener\u00f3 la ejecuci\u00f3n gasFee : Gas cost * Gas Price Priority fee A partir del EIP1559 , se realizaron cambios importantes al mercado de gas, y se contempla el priority fee, que es el extra que menciona Sebasti\u00e1n, y es una propina para el minero con la cu\u00e1l se obtiene prioridad en la ejecuci\u00f3n. Lecturas Recomendadas https://ethgasstation.info/ https://ethereumprice.org/gas/","title":"Gas y Comisiones"},{"location":"coding_notes/solidity/#transferencias-de-ether-desde-un-contrato","text":"send : Env\u00eda un monto a una direcci\u00f3n y retorna false si la transferencia no se realiza transfer : Env\u00eda un monto y revierte si no se puede realizar call : Esta es m\u00e1s complicada, pero b\u00e1sicamente realiza una llamada hacia una direcci\u00f3n. Incluso se pueden llamar funciones de otro contrato si se le pasa un address v\u00e1lido y la llamada dentro del par\u00e1metro data. No obstante, al ser un mensaje, puede llevar ether, y por eso se usa para env\u00edos. Retorna el resultado de la funci\u00f3n llamada (si es que fu\u00e9 el caso). Un wei es la unidad m\u00e1s peque\u00f1a de Ether. 1 ETH == 10^18 WEI == 1,000,000,000,000,000,000 WEI","title":"Transferencias de ether desde un contrato"},{"location":"coding_notes/solidity/#recibir-ether-desde-un-contrato","text":"Receive : Recibe el saldo de trasferencias sin par\u00e1metros. FallBack : Recibe informaci\u00f3n adjunta a la trasferencia por medio de los par\u00e1metros. Payable : Se especifica el tipo payable a una funci\u00f3n que puede recibir trasferencias. Lecturas Recomendadas Sin lectura Recomendada","title":"Recibir ether desde un contrato"},{"location":"coding_notes/solidity/#capitulo-16-manejo-de-dependencias-y-librerias","text":"Lecturas Recomendadas https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol","title":"Capitulo 16: Manejo de dependencias y librer\u00edas"},{"location":"coding_notes/solidity/#herencias","text":"\u201cNo hay que reinvetar la rueda\u201d Utilizamos la Herencia para reutilizar codigo en nuevos contratos. is . Si un contrato tiene un constructor con parametros, debemos indicar que valores debe tomar ese constructor para poder derivarse. Entonces, se busca generar una relacion entre contratos para reutilizar el codigo mediante la Herencia. Por lo que la capacidad de agregar/modificar una funcion ya escrita en el contrato anterior nos sera de mucha utilidad. virtual : se utiliza para identificar un contrato que puede ser heredado. override : para sobreescrivir una funcion de un contrato heredado se usa la palabra. contacto abstracto es lo mismo que una clase abstracta. Las interfaces no van a tener codigo. su funcion es indicarnos un comportamiento que queremos que tenga un contrato. Solo tiene declaraciones (definiciones de funciones) sin codigo. super (sentencia) nos sirve para hacer referencia a una funcion de clase superior. Ejemplo practico: Buscamos 2 funciones virtuales en Modificadores\ud83d\udcd7 e Interface\ud83d\udcd8 para colocar en nuestro archivo/contrato de Herencia \ud83d\udcd5\ud83d\udcd8\ud83d\udcd7. Vamos a tener que importar el directorio de los demas contratos, en este caso se encuentran en la misma carpeta los contratos. Coloco los emojis de libros para hacer referencia a un contrato, si hay varios libros es porque es una Herencia que contiene otros contratos. Herencia.sol \ud83d\udcd5\ud83d\udcd8\ud83d\udcd7 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.7.0 < 0.9.0; import \"./Interface.sol\"; import \"./Modificadores.sol\"; contract Herencia is Suma, Modificadores { constructor(string memory nombreNuevo) Modificadores(nombreNuevo) { } function sumar(uint numero1, uint numero2) public override EsOwner() view returns(uint) { return numero1 + numero2; } } Es buena practica traer todo el encabezado de la funcion de \u201cInterface\u201d, por lo que es recomendable copiar y pegar \u201cfunction sumar(uint numero1, uint numero2)\u201d Interface.sol \ud83d\udcd8 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.7.0 < 0.9.0; interface Suma { function sumar(uint numero1, uint numero2) external returns (uint); } Modificadores.sol \ud83d\udcd7 // SPDX-Licence-Identifier: UNLICENSED pragma solidity >=0.4.0 < 0.9.0; contract Modificadores { address private owner; string private nombreOwner; constructor(string memory nombre { owner = msg.sender; nombreOwner = nombre; } function Suma(uint numero1, uint numero2) public view EsOwner() returns (uint) { return numero1 + numero2; } modifier EsOwner() { if (msg.sender != owner) revert(); _; } }","title":"Herencias"},{"location":"coding_notes/solidity/#polimorfismo","text":"Capacidad de poder utilizar contratos deployados y sus contratos superiores o funciones de los mismos en nuestro contrato. Polimorfismo es una propiedad de la POO que permite (a nivel general digamos) enviar mensajes iguales a objetos de diferentes tipos. En limpio: tus objetos deben de \u201csaber\u201d responder al mensaje que les est\u00e1s enviando, esta es la propiedad polim\u00f3rfica. No tiene nada qu\u00e9 ver con contratos ni nada por el estilo, es puramente un tema de objetos","title":"Polimorfismo"},{"location":"coding_notes/solidity/#tokens","text":"\u200dUn token es un objeto f\u00edsico o digital que tiene valor en cierto contexto o para determinada comunidad, aunque su propia materialidad no contenga ese valor en s\u00ed. Las fichas de casino, por ejemplo, son solo pedazos de pl\u00e1stico de distintos colores, pero representan cantidades de dinero. Algunas, hasta millones de d\u00f3lares, aunque fabricar una de ellas cueste apenas centavos. Eso hacen los tokens: representan otra cosa, est\u00e1n en su lugar. \u00bfPor qu\u00e9? Hay muchos motivos: la comodidad, la seguridad, la facilidad de transportarlos o transferirlos. En el mundo cripto, los tokens se generan a partir de piezas de c\u00f3digo de programaci\u00f3n, en formato de contratos inteligentes que corren sobre la blockchain. El smart contract describe c\u00f3mo funciona cada token. La base de datos lleva el registro de cu\u00e1ntos tiene cada quien. Y los usuarios pueden envi\u00e1rselos entre s\u00ed como forma de transferirse valor. Lecturas Recomendadas Estandares Tokens no Fungibles: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol Estandares Tokens Fungibles: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol","title":"Tokens"},{"location":"coding_notes/solidity/#application-binary-interface-abi","text":"Lecturas Recomendadas https://docs.ethers.io/v5/api/utils/abi/ https://web3js.readthedocs.io/en/v1.2.11/web3-eth-abi.html#eth-abi","title":"Application Binary Interface (ABI)"}]}